wayic.script/doc.task - Documentation in rough

    < ./wayscript#wayscript

    + formal summary
        - XML-format hypertext
            ( § Design constraints § XML-format hypertext (XHTML)
            § Namespaces
            § HTML attribution

        § Waybit
            § Step

        § Attributive grouping
        § Nesting of waybit elements
        § Referential jointing

    + operative context
        - a way declaration document
            ( http://reluk.ca/project/wayic/cast/way_declaration_document
            ( § Design constraints § operation in the context of a way declaration document

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Attributive grouping`
    - a waybit element nested in an attributive group element nested in a waybit element
    - modelling a relation of inherence or subsistence of one way part in another
        ( see § Modelled way relation
    - example [ETO]

          <A>
              <cog:group rel='in'>
                  <P>

        - meaning: part P inheres in whole A, or subsists in whole A
    [ *group* element
        < cog:group, namespace data:,wayscript.cog
        - placement: child of waybit element
        - content
            + qualifying text
                < optional
                - to explain, describe or otherwise qualify the composition
                - placement: leading child
                - typically a short phrase terminated by a colon
                - example

                      <A>
                          <cog:group rel='in'> including:
                              <P>
                              <Q>
                      <B>
                          <cog:group rel='in'> comprising:
                              <P>
                              <Q>

                    - meaning
                        - whole A has parts P and Q
                        - whole B has parts P and Q only
                        - and, by the way:
                            - wholes A and B are peers, and in each
                              parts P and Q are peers
                                ( § Level conjunction of waybit elements
            + one or more waybits
                - each to model a part that inheres or subsists
        + *rel* attribute
            < mandatory, no namespace
            - to define the way relation between the waybit parent of the *group* element
              and each waybit child of the *group* element
            ( fashioned after the HTML *rel* attribute
                ( https://html.spec.whatwg.org/multipage/semantics.html#attr-link-rel
            - value: ‘in’
                - the ‘in’ value specifies a relation of inherence or subsistence
                    - it declares that the way parts modelled by the children of the group element
                      inhere or subsist *in* the whole modelled by its parent
                ( later the value format may be expanded to a set of space-separated tokens
                    ( https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#set-of-space-separated-tokens

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Bitform referential jointer`
    < a form of (§) referential jointer
    - a waybit with a (§) subjoining waybit reference
    - constraints
        - has the same namespace as its referent subjoining waybit
            ( e.g. only a step jointer can refer to a subjoining step
        - has no content
    - a jointer element with a local name of ‘_same’ is instead presented to document viewers
      with the same local name as the referent subjoining waybit

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Commitment declaration`
    - a bitform referential joint to a resolve waybit
        - comprising the jointer (commitment jointer) and its referent
        - the subjoining resolve waybit
    [ commitment jointer
        - a bitform referential jointer that refers to /way.xht#resolve
            - whereby the waycaster declares an active commitment
        - the waycaster
            - should
                * place one in precisely each waybit of the larger way declaration
                  where he intends to act directly
                    - as a child of that waybit
                * set the node name to reflect the commited action
            - may
                * set a cog:ordinal attribute to assign an intended order to the act
                    ( tasked as wayic.read § cog:ordinal
                    - so prioritizing it relative to other declared commitments
        - implicitly the whole line of wayscript containing the jointer is uniquely personal
            ( wayic.copy § uniquely personal lines of text § implicit
            - a convienience
            - whence the bitform constraint on commitment jointers
                - a hyperform node might (and most often would) occupy but a part of the line
                    - making this convienience harder to implement
        + intracast commitment declaration
            - currently documented in source text of http://reluk.ca/project/waycast/way.xht#resolve
                = copy that documentation to here
        + intercast commitment declaration
            ( wayic.intercast § Intercast commitment declaration
    [ resolve waybit
        - the waybit at waycast location /way.xht#resolve
            - which is the waybit of the root way document that has an *id* attribute of ‘resolve’

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Design constraints`
    [ ⤓ minimal
        + XML-format hypertext
            - the basic form of wayscript is XML-format hypertext (XHTML)
                ( http://w3c.github.io/html/introduction.html#html-vs-xhtml
                ( http://w3c.github.io/html/infrastructure.html#xml
                ( http://w3c.github.io/html/xhtml.html
            ∴ hypertext
                ∵ the *waycast* is public
                    ( http://reluk.ca/project/waycast/constraints.xht#availability
                ∵ the premiere medium of *publication* today is the Web
                ∵ the basic script of the *web* is hypertext
            ∴ XML format
                ∵ XML facilitates coping with proper wayscript markup
                    - these aspects of XML in particular:
                        - namespacing
                        - strict syntax and parsing
                    - they facilitate:
                        - defining the markup's elements and attributes
                        - writing the markup
                        - processing it at runtime
        + operation in the context of a way declaration document
            ( http://reluk.ca/project/wayic/cast/way_declaration_document
            - wayscript is properly interpreted only in the context of a way declaration document
        + relative referencing bound by the waycast
            - all relative references in wayscript proper are bound by the waycast
              of the way declaration document
                ( see § operative in the context of a way declaration document
            - ensuring that each resolves to a referent in the same waycast
            ∴ so bound
                ∵ unbounded relative references would be liable to breakage
                    ∵ the waycast is portable
                        ∵ need basic utility
                        ∵ need user freedom
                            ∵ wayic.architec § Fi Maximization of user freedom
                                ( http://reluk.ca/project/wayic/architec/doc.task
                    ∵ the waycast is copyable
                        ∵ wayic.architec § Fo Maximization of system availability to non-users
            ∴ this boundary applies to proper wayscript only
                ∵ enforcing the boundary in proper XML and HTML parts would be infeasible
                    ∵ non-wayic tools will process proper XML and HTML parts regardless of the boundary
                        ∵ no wayic pre-processor can feasibly preempt all non-wayic processing
                            ∵ some non-wayic processors (of web browsers for instance)
                              run prior to any normal, wayic processor

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    HTML attribution`
    - the HTML attribution inherent in wayscript is standard except as noted here
    + *id* attribute
        < no namespace
        - its contraints are those of XML
            - tighter than plain HTML
            - why? to be on the safe side, pending cause for loosening
        - namely:
            - type: XML ID, unique within document
                ( https://www.w3.org/TR/xml/#sec-attribute-types
            - form: XML Name
                ( https://www.w3.org/TR/xml/#NT-Name
    + *href* attribute
        < no namespace
        - the *href* attribute of the *a* element is resolved in waycast context
            ( http://reluk.ca/project/waycast/waycast_context
        - thereby enabling it to take the form (wholly or partly) of a waycast clamped reference
            ( § Waycast clamped reference
            - consistent (more or less) with the  referential attributes of wayscript proper
                ( § Design constraints § relative referencing bound by the waycast
            - which are numerous
            - making this a convenience for the wayscribe

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Hyperform referential jointer`
    < a form of (§) referential jointer
    - an HTML *a* element with a (§) subjoining waybit reference
    - constraint: it has no *href* attribute

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Level conjunction of elements`
    - one element in level conjunction with another
    + genealogical terms
        - the convention for both HTML and XML, thus also for wayscript
        - example [ETO]

              <A> Sibling
              <B> Sibling

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Level conjunction of waybit elements`
    - modelling a relation of community between way parts
        ( see § Modelled way relation
    - one waybit element in level conjunction with another
    - examples [ETO]
        + general

              <A>
              <B>

            - meaning: parts A and B are peers
            + formal, genealogical terms
                < as per § Level conjunction of elements, q.v.
                - referring to the empty form, implying no meaning

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Modelled way relations`
    - a modelled way relation is a way determinate relation between way parts
      which is represented in the way model as a relation between waybits
    ( cf. § Unmodelled way relations
    [ form
        - see § types of relation §§ modelled form, below
        - combined example [ETO]

              <C>
                  <cog:group rel='in'>
                      <P>
                      <Q>
                  <B>
                      <A>

            - meaning
                - parts P and Q inhere in part C, or subsist in part C
                - parts P and Q are peers in part C
                - part C depends on part B, or is caused by part B
                - part B depends on part A, or is caused by part A
    [ types of relation
        - here categorized in Kantian terms
            ( Kant, Table of Categories, A80/B106
            ( cf. A336/B393 where he applies these categories (below) to conditional relations
        + inherence and subsistence
            ( I take it subsistence here means *subordinate existence*
            ' *substantia et accidens*
                ( meaning essence and accidents
                ( cf. Fred Brooks, 1987, No silver bullet: essence and accidents of software engineering
            - one way part inhering in another, or subsisting in another
            - modelled form
                | a waybit element nested in an attributive group element nested in a waybit element
                    ( § Attributive grouping
                    - example [ETO]

                          <B>
                              <cog:group rel='in'>
                                  <A>

                        - meaning: part A inheres in whole B, or subsists in whole B
        + causality and dependence
            - one way part causing another as an effect, or having another as a dependant
            - modelled form
                | one waybit element nested in another
                    ( § Nesting of waybit elements
                    - example [ETO]

                          <B>
                              <A>

                        - meaning: part A causes part B, or part B depends on part A
        + community
            ' reciprocity between agent and patient
            - the co-occurence of two way parts, neither subordinate to the other
                ( B112-3
                - relations of peerage
            - modelled form
                | one waybit element in level conjunction with another
                    ( § Level conjunction of waybit elements
                    - example [ETO]

                          <A>
                          <B>

                        - meaning: parts A and B are peers

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Namespaces`
    ( https://www.w3.org/TR/xml-names/
    - notation
        - multiple namespaces may be symbolized by a ‘*’ placeholder appended to a supernamespace
        - example, all subnamespaces of the ‘bit’ [sub]namespace:

              data:,wayscript.bit.*

    - hierarchy
        - here are the namespaces used in wayscript
        < data:,wayscript.
            - wayscript supernamespace
            + data:,wayscript.bit
                - namespace of waybits simply, excluding subspaced waybits such as steps
                < data:,wayscript.bit.
                    - supernamespace of waybit subtypes
                        - such as step
                        - or others independently defined elsewhere
                    + data:,wayscript.bit.step
                        - namespace of steps
            + data:,wayscript.cog
                - general purpose namespace
    - terms
        * supernamespace
            - examples
                < data:,wayscript.
                < data:,wayscript.bit.
            - a supernamespace is not functional as is, not usable in wayscript
        * subnamespace
            - a subnamespace is functional as is, usable in wayscript
            - examples
                < data:,wayscript.bit
                < data:,wayscript.bit.step
                < data:,wayscript.step
            - a subnamespace may be alluded to by a foreshortened name
                - examples of foreshortened names
                    < bit
                    < bit.step
                    < step

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Nesting of elements`
    - one element nested in another
    - terms
        + genealogical
            - the convention for both HTML and XML, thus also for wayscript
            - examples [ETO]

                  <B> Parent
                      <A> Child

                  <B> Ancestor
                        ⋱
                        <A> Descendant

        + arboreal
            - examples [ETO]

                  <C> Root
                        ⋱
                        <B> Branch
                              ⋱
                              <A> Leaf

                  <B> Stem
                      <A>

        + coined
            * infrabut
                ( ./infrabut
            * suprabut
                ( ./suprabut
            - examples [ETO]

                  <B> Suprabutting
                      <A> Infrabutting

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Nesting of waybit elements`
    - one waybit element nested in another
    - modelling a relation of causality or dependence between way parts
        ( see § Modelled way relation
    - examples [ETO]
        + general
            - causality or dependence

              <B>
                  <A>

            - meaning: part A causes part B, or part B depends on part A
            + formal terms
                - referring to the empty form, implying no meaning
                + genealogical
                + arboreal
                + coined
                    < all as per § Nesting of elements, q.v.
                + spatial

                      <B> Overbit
                            ⋱
                            <A> Underbit
        + causality

              <B> Effect
                  <A> Cause

            - meaning
                - cause A conditions effect B
                - cause A is the reason for effect B
        + dependence
            - dependence is expected to predominate over causality in a typical waycast

              <B> Dependant
                  <A>

            - meaning: dependant B depends on part A
                ( one might attach the name ‘Dependency’ to A, but that would be non-standard English
            - taking ‘dependence’ in its original sense of down hanging
                - note that the nested form turns it upside down
                - visually B depends (hangs down) from A
            + logical dependence
                - viz. in the logical parts of a way

                  <B> Conclusion
                      <A> Premise

                - meaning: from premise A one infers conclusion B
            + practical dependence
                - viz. in the practical parts of a way
                + means-end relation

                      <B> End
                          <A> Means

                    - meaning
                        - by means A one attains end B
                        - to be sure, also implied is a reverse dependence:
                            - end B warrants means A
                            - in other words
                                - end B conditions means A
                                - end B is the reason for means A
                                - the rationality of employing means A
                                  depends on the will to attain end B
                + order condition
                    ( from § Step

                      <step:s3> Step 3
                          <step:s2> Step 2
                              <step:s1> Step 1

                    - meaning
                        - step 3 must succeed step 2
                        - step 2 must succeed step 1

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Referential jointing`
    ( ./referential_joint#referential_joint
    - referential jointing is an alternative to direct junction by nested abutment
        ( cf. §§ Nesting of elements & Nesting of waybit elements
    [ purpose
        - two fold
        1 modeling a single way with separately declared waybits
        2 enabling a waybit (in effect) to nest at multiple places in the same model
            - such that multiple elements are parents of this waybit
                - their common child
            - or
                ( closer to the meaning of element nests
                - such that multiple wholes share the part which is represented by this waybit in common
                    < what nesting means in § Attributive grouping
                - or that multiple derivatives (effects or dependants)
                  derive from this common origin (cause, premise, means or what not)
                    < what nesting means in § Nesting of waybit elements
                - or some combination of these
                    - in one place the waybit being a part
                        ( § Modelled way relations § inherence and subsistence
                    - in another a cause or means
                        ( § Modelled way relations § causality and dependence
    [ form
        - a joint is formed of two elements
            - a referrer
                - typically a (§) referential jointer
            - its referent
                - a (§) subjoining waybit
        - the mapping between jointers and joints entire is 1:1
            - each jointer effectively declares a separate joint
            ( the same is not true of subjoining waybits, which map to joints 1:N
        - the joint is declared unidirectionally
            - from jointer to subjoining waybit
            - for sake of general simplicity and robustness
                - subordinate building blocks (e.g. underbits) can be implemented
                  blind to the uses (overbits) they will be put in future
                    - discourages unecessary overbit attachements/assumptions
                      that would tend to increase complexity
                      and decrease robustness of the overall structure
                - a node (e.g. overbit) can fully define its own edges
                    - no underbit being able to contradict the definition
                    - which simplifies machine (and human) processing of the structure
    [ effect
        - the effect of a referential joint is determined by would-be wayscript changes
          (effective changes) as the effect the changes would introduce
        - effective changes of a referential joint:
            * any referential joint
                - the subjoining waybit gains a parent (effective parent)
                  which is the parent of the jointer
                    - in addition to its declared parent
            * bitform referential joint
                ( additional to the above
                - where it infrabuts the effective parent, the subjoining waybit:
                    - takes the local name of the bitform jointer
                        - which thereby masks (at this location) its declared local name
                    - takes all attributes of the bitform jointer
                        - which thereby extend and/or mask (at this location) its declared attributes
                - the bitform jointer is removed
                - in other words, the subjoining waybit (at this location)
                  pretty much merges with the jointer
    [ causality and dependence relations
        - owing to how the effect of a referential joint is determined
            ( § Referential joint § effect
            - no referential joint can bring its subjoining waybit into a relation of causality
              in the role of effect
            - nor of dependence in the role of dependant
        - adding a nested waybit to a hyperform jointer (the only form that allows such addition)
            - thus bringing it into a relation of causality or dependence
            - would not bring the subjoining waybit into the same relation
        - the subjoining waybit (in gaining the same parent) becomes a *sibling* to the jointer
            ( § Referential joint § effect § effective changes of a referential joint
            - separate of the jointer and its content
  / [ looped referential jointing
  /     - an edge case in which the subjoining waybit is an ancestor of the referrer
  /     - formally allowed though not guaranteed to make sense
  // till I have a need to document this, and hopefully a practical example, or counter example

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Referential jointer`
    ( ./referential_jointer#referential_jointer
    - form, one of
        § Bitform referential jointer
        § Hyperform referential jointer
    - function
        - referential jointing (§ q.v.)
        - it declares a referential joint

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Step`
    < namespaced data:,wayscript.bit.step
    - modelling a volitive part of a way
        - a distinct|discrete act
        - e.g. a step or stage in a plan
    - nesting of step elements formalizes an order condition among the steps
        ( see also § Nesting of waybit elements
        - example [ETO]

              <step:s3> Step 3
                  <step:s2> Step 2
                      <step:s1> Step 1

            - meaning
                - step 3 must succeed step 2
                - step 2 must succeed step 1
                - relative to each other, the steps must execute in the declared order
        - counter example

              <step:s1> Step 1
              <step:s2> Step 2
              <step:s3> Step 3

            - meaning: steps 1, 2 and 3 are independent of each other
                - relative to each other, they may execute in any order

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Subjoining waybit`
    ( ./subjoin#subjoin
    - constraints
        ( the conditions of a subjoining waybit, which determine it as such
        - it is a waybit
        - it is referenced by a referential jointer
        - it has no *join* attribute
            - whereby it would serve also as a bitform referential jointer
              with a subjoining waybit of its own
            - whereby each of its jointers together with it and its subjoining waybit
              would form a double joint
                - a joint to a joint
            - disallowed
            - reasons
                - double jointing has no clear use case to justify its attendant complications
                - double jointing might over-constrain the presentation of the way model in practice
                    - e.g. where an application would give to jointer and subjoining waybit
                      distinct yet overlapping presentations that are difficult to combine
                      in a single element

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Subjoining waybit reference`
    - a subjoining waybit reference comprises up to three elemental attributes
      of which two are optional (*import*, *offset*) and one mandatory (*join*)
        + but note
            - the *import* and *offset* attributes are not yet supported by wayic.read
    - formal summary

          [import='WAYCAST-URI']  offset='ELEMENTAL-REL-REF'  join='WAYBIT-REL-PATH'

          [import='WAYCAST-URI']  join='WAYBIT-REL-REF'

    + *import* attribution
        < cog:import, namespace data:,wayscript.cog
        - attribute optional, may be omitted
            - not yet supported by wayic.read
        - form: URI that does not refer to the waycast of the present way declaration document
            ( URI, https://tools.ietf.org/html/rfc3986#section-3
        - function
            - overall it sets the waycast context of the reference
                ( http://reluk.ca/project/wayic/cast/waycast_context
            * function when omitted
                - sets the waycast context to that of the present way declaration document
            * function when present
                - if the referent waycast is that of the present way declaration document
                    - the reference is malformed and invalid
                - else
                    < edge case
                        - if the referent waycast is a known alias (alternative location, or whatnot)
                          of the waycast of the present way declaration document
                            - the reference is improper but is accepted as valid
                                ( accepted because it may be useful for test purposes
                            - the wayscribe is warned if feasible
                    - effectively imports an image of the referent waycast
                        - adding to the present waycast a (more or less) live copy
                        - one that stays (roughly) up to date with the original
                    - sets the waycast context (of the other attributes of the reference)
                      to that of the (effective) image
                        - note this removes them from the context of the present document
                          and so defeats any same-document reference
                            ( Same-document reference, https://tools.ietf.org/html/rfc3986#section-4.4
    + *offset* attribution
        < cog:offest, namespace data:,wayscript.cog
        - attribute optional, may be omitted
            - not yet supported by wayic.read
        - form: a (§) waycast self-bounded reference
        - function
            * function when omitted
                - switches the *join* attribute into direct form
            * function when present
                - sets a context node for the reference
                    ( https://www.w3.org/TR/xpath-3/#id-relative-path-expressions
                - switches the *join* attribute into offset form
    + *join* attribute
        < cog:join, namespace data:,wayscript.cog
        - attribute mandatory, always present
        - form
            - one of two forms as determined by the switching function
              of the *offset* attribution
            * offset form
                < for reference to a waybit that has no *id* attribute
                - an XPath relative path expression
                    ( https://www.w3.org/TR/xpath-3/#id-relative-path-expressions
                    - relative to the context node as set by the *offset* attribution
            * direct form
                ( no *offset* attribute is present
                < for reference to a waybit that has an *id* attribute
                - a (§) waycast self-bounded reference
        - function: refines the reference down to the precise location of the referent waybit

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waybit`
    ( ./waybit#waybit
    + names
        < the naming of waybits
        - naming is free-form
            - except for reserved names
        - purpose of names
            - to help the reader understand the waybits
                - their relations
                - and the larger ways [they compose]
                - to bring out their meaning
            - to serve as placeholders for waybits
                - especially in the more compressed views
                - the names will stand in for the waybits
      / - best not be indispensible to the meaning of the waybit
      /     - ∵ a bitform jointer (within its context) may effectively change the subjoining waybit name
      // no room here for wayscripting tips, which would need clarifying by example script
        - reserved names
            - names beginning with an underscore ‘_’ are reserved
                - do not use such names for normal purposes
        - a name of ‘_’ means no name (anonymous waybit)
    + types
        < types of waybit
        * waybit simply
            < namespaced data:,wayscript.bit
        * step
            ( see §

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waycast clamped reference`
    - a relative reference with an absolute path and no dot segment
        ( Relative reference,         https://tools.ietf.org/html/rfc3986#section-4.2
        ( path-absolute, dot-segment, https://tools.ietf.org/html/rfc3986#section-3.3
        - relative to a given waycast context
            ( http://reluk.ca/project/wayic/cast/waycast_context
    - the absolute path makes the relation to the waycast root directory explicit
    - together with the prohibition on dot segments
        - especially the implication of no double-dot segment
        - it is self constrained to the boundary of the waycast context

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waycast self-bounded reference`
    - one of
        | a fragment-only, same-document reference
            ( Fragment,                https://tools.ietf.org/html/rfc3986#section-3.5
            ( Same-document reference, https://tools.ietf.org/html/rfc3986#section-4.4
        | a URI based, waycast clamped reference with a fragment
            ( § Waycast clamped reference
    - whereby it is self constrained to the boundary of a waycast context



    ════════════════════════════════════════════════════════════════════════════════════════════════════
    Note`

    [ETO]  End tags omitted.  Here the XML end tags are omitted for sake of clarity.


                                     Copyright © 2017-2018 Michael Allan and contributors.  Licence MIT.
