wayic.script/doc.task - Documentation in rough

    - wayscript
        ( ./wayscript#wayscript
        - occurs in way declaration documents
            ( http://reluk.ca/project/wayic/cast/way_declaration_document

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Attributive grouping`
    - a waybit element nested in an attributive group element nested in a waybit element
    - modelling a relation of inherence or subsistence of one way part in another
        ( see § Modelled way relation
    - example [ETO]

          <A>
              <cog:group rel='in'>
                  <P>

        - meaning: part P inheres in whole A, or subsists in whole A
    [ *group* element
        < cog:group, namespace data:,wayscript.cog
        - placement: child of waybit element
        - content
            + qualifying text
                < optional
                - to explain, describe or otherwise qualify the composition
                - placement: leading child
                - typically a short phrase terminated by a colon
                - example

                      <A>
                          <cog:group rel='in'> including:
                              <P>
                              <Q>
                      <B>
                          <cog:group rel='in'> comprising:
                              <P>
                              <Q>

                    - meaning
                        - whole A has parts P and Q
                        - whole B has parts P and Q only
                        - and, by the way:
                            - wholes A and B are peers, and in each
                              parts P and Q are peers
                                ( § Level conjunction of waybit elements
            + one or more waybits
                - each to model a part that inheres or subsists
        + *rel* attribute
            < mandatory, no namespace
            - to define the way relation between the waybit parent of the *group* element
              and each waybit child of the *group* element
            ( fashioned after the HTML *rel* attribute
                ( https://html.spec.whatwg.org/multipage/semantics.html#attr-link-rel
            - value: 'in'
                - the 'in' value specifies a relation of inherence or subsistence
                    - it declares that the way parts modelled by the children of the group element
                      inhere or subsist *in* the whole modelled by its parent
                ( later the value format may be expanded to a set of space-separated tokens
                    ( https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#set-of-space-separated-tokens

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Bitform referential jointer`
    < a form of (§) Referential jointer
    - form
        < additional to § Referential jointer § form
        - the jointer is a waybit in the same namespace as the subjoining waybit
            - e.g. only a step jointer can declare a step to be subjoining
        - a local name of '_same' on the jointer means *the same name*
          as the referent subjoining waybit
        - the jointer must not have
            - content
            - *id* attribute
                - disallowed
                - whereby it would also serve as a subjoining waybit
                - reason: it might be infeasible to represent in some applications
                    - e.g. where the application gives to jointer and subjoining waybit
                      distinct representations that would be difficult to combine as one

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Commitment declaration`
    - a bitform referential jointer that refers to /#commitment
        - whereby the waycaster declares a commitment to act
    - the waycaster
        - should
            * place one in precisely each waybit of the larger way declaration
              where he intends to act directly
                - as a child of that waybit
            * set the node name to reflect the commited action
        - may
            * set a cog:ordinal attribute to assign an intended order to the act
                ( tasked as wayic.read § cog:ordinal
                - so prioritizing it relative to other declared commitments
    - implicitly the whole line of wayscript that declares the commitment is uniquely personal
        ( wayic.copy § uniquely personal lines of text § implicit
        - a convienience
        - whence the bitform constraint on commitment declarations
            - a hyperform node might (and most often would) occupy but a part of the line
                - making this convienience harder to implement
    [ intracast
        ( intracast commitment declaration
        - currently documented in source text of http://reluk.ca/project/waycast/way.xht#commitment
            = copy that documentation to here
    [ intercast
        ( intercast commitment declaration
        - see wayic.intercast § commitment declaration § intercast

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Design constraints`
    [ ⤓ minimal
        - necessary form of wayscript
        * XML-format hypertext (XHTML)
            ( http://w3c.github.io/html/introduction.html#html-vs-xhtml
            ( http://w3c.github.io/html/infrastructure.html#xml
            ( http://w3c.github.io/html/xhtml.html
            - hypertext
                ∵ wayscript is basic to the waycast
                ∵ the *waycast* is public
                    ( http://reluk.ca/project/waycast/engineer/wayics/cast/way.xht#availability
                ∵ the premiere medium of *publication* today is the Web
                ∵ the basic script of the *web* is hypertext
                ∴ hypertext
            - XML format
                ∵ XML facilitates coping with the specialized elements and attributes of wayscript
                    - these aspects of XML in particular:
                        - namespacing
                        - strict syntax and parsing
                    - they facilitate:
                        - defining the specialized elements and attributes of wayscript
                        - writing them in source
                        - processing them at runtime
        * location in a way declaration document

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    HTML inclusions`
    - allowed
    - hyperlinks within wayscript
        - the *href* attribute of the *a* element is resolved in waycast space
            ( q,v. in § cast element

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Hyperform referential jointer`
    < a form of (§) Referential jointer
  / - placement: descends from a waybit
    - form
        < additional to § Referential jointer § form
        - it is an HTML *a* element
        - it has no *href* attribute
            - rather a *link* attribute

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Level conjunction of elements`
    - one element in level conjunction with another
    + genealogical terms
        - the convention for both HTML and XML, thus also for wayscript
        - example [ETO]

              <A> Sibling
              <B> Sibling

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Level conjunction of waybit elements`
    - modelling a relation of community between way parts
        ( see § Modelled way relation
    - one waybit element in level conjunction with another
    - examples [ETO]
        + general

              <A>
              <B>

            - meaning: parts A and B are peers
            + formal, genealogical terms
                < as per § Level conjunction of elements, q.v.
                - referring to the empty form, implying no meaning

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Modelled way relations`
    - a modelled way relation is a way determinate relation between way parts
      which is represented in the way model as a relation between waybits
    ( cf. § Unmodelled way relations
    [ form
        - see § types of relation §§ modelled form, below
        - combined example [ETO]

              <C>
                  <cog:group rel='in'>
                      <P>
                      <Q>
                  <B>
                      <A>

            - meaning
                - parts P and Q inhere in part C, or subsist in part C
                - parts P and Q are peers in part C
                - part C depends on part B, or is caused by part B
                - part B depends on part A, or is caused by part A
    [ types of relation
        - here categorized in Kantian terms
            ( Kant, Table of Categories, A80/B106
            ( cf. A336/B393 where he applies these categories (below) to conditional relations
        + inherence and subsistence
            ( I take it subsistence here means *subordinate existence*
            ' *substantia et accidens*
                ( meaning essence and accidents
                ( cf. Fred Brooks, 1987, No silver bullet: essence and accidents of software engineering
            - one way part inhering in another, or subsisting in another
            - modelled form
                | a waybit element nested in an attributive group element nested in a waybit element
                    ( § Attributive grouping
                    - example [ETO]

                          <B>
                              <cog:group rel='in'>
                                  <A>

                        - meaning: part A inheres in whole B, or subsists in whole B
        + causality and dependence
            - one way part causing another as an effect, or having another as a dependant
            - modelled form
                | one waybit element nested in another
                    ( § Nesting of waybit elements
                    - example [ETO]

                          <B>
                              <A>

                        - meaning: part A causes part B, or part B depends on part A
        + community
            ' reciprocity between agent and patient
            - the co-occurence of two way parts, neither subordinate to the other
                ( B112-3
                - relations of peerage
            - modelled form
                | one waybit element in level conjunction with another
                    ( § Level conjunction of waybit elements
                    - example [ETO]

                          <A>
                          <B>

                        - meaning: parts A and B are peers

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Namespacing`
    - XML namespacing for wayscript
    - terms of hierarchy
        * supernamespace
            - examples
                < data:,wayscript.
                < data:,wayscript.bit.
            - a supernamespace is not a [proper] namespace
        * subnamespace
            - a subnamespace is a [proper] namespace
            - examples
                < data:,wayscript.bit
                < data:,wayscript.bit.step
                < data:,wayscript.step
            - a subnamespace may be represented by a foreshortened name
                - examples of foreshortened names
                    < bit
                    < bit.step
                    < step
    - multiple namespaces may be symbolized by a '*' placeholder appended to a supernamespace
        - example, all subnamespaces of the 'bit' [sub]namespace:
            < data:,wayscript.bit.*
    - namespaces
        < data:,wayscript.
            - wayscript supernamespace
            + data:,wayscript.bit
                - namespace of waybits simply, excluding subspaced waybits such as steps
                < data:,wayscript.bit.
                    - supernamespace of waybit subtypes
                        - such as step
                        - or others independently defined elsewhere
                    + data:,wayscript.bit.step
                        - namespace of steps
            + data:,wayscript.cog
                - general purpose namespace

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Nesting of elements`
    - one element nested in another
    - terms
        + genealogical
            - the convention for both HTML and XML, thus also for wayscript
            - examples [ETO]

                  <B> Parent
                      <A> Child

                  <B> Ancestor
                        ⋱
                        <A> Descendant

        + arboreal
            - examples [ETO]

                  <C> Root
                        ⋱
                        <B> Branch
                              ⋱
                              <A> Leaf

                  <B> Stem
                      <A>

        + coined
            * infrabut
                ( ./infrabut
            * suprabut
                ( ./suprabut
            - examples [ETO]

                  <B> Suprabutting
                      <A> Infrabutting

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Nesting of waybit elements`
    - one waybit element nested in another
    - modelling a relation of causality or dependence between way parts
        ( see § Modelled way relation
    - examples [ETO]
        + general
            - causality or dependence

              <B>
                  <A>

            - meaning: part A causes part B, or part B depends on part A
            + formal terms
                - referring to the empty form, implying no meaning
                + genealogical
                + arboreal
                + coined
                    < all as per § Nesting of elements, q.v.
                + spatial

                      <B> Overbit
                            ⋱
                            <A> Underbit
        + causality

              <B> Effect
                  <A> Cause

            - meaning
                - cause A conditions effect B
                - cause A is the reason for effect B
        + dependence
            - dependence is expected to predominate over causality in a typical waycast

              <B> Dependant
                  <A>

            - meaning: dependant B depends on part A
                ( one might attach the name 'Dependency' to A, but that would be non-standard English
            - taking 'dependence' in its original sense of down hanging
                - note that the nested form turns it upside down
                - visually B depends (hangs down) from A
            + logical dependence
                - viz. in the logical parts of a way

                  <B> Conclusion
                      <A> Premise

                - meaning: from premise A one infers conclusion B
            + practical dependence
                - viz. in the practical parts of a way
                + means-end relation

                      <B> End
                          <A> Means

                    - meaning
                        - by means A one attains end B
                        - to be sure, also implied is a reverse dependence:
                            - end B warrants means A
                            - in other words
                                - end B conditions means A
                                - end B is the reason for means A
                                - the rationality of employing means A
                                  depends on the will to attain end B
                + order condition
                    ( from § Step

                      <step:s3> Step 3
                          <step:s2> Step 2
                              <step:s1> Step 1

                    - meaning
                        - step 3 must succeed step 2
                        - step 2 must succeed step 1

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Referential jointer`
    ( ./referential_jointer#referential_jointer
    [ form
        * *link* attribute
            < cog:link, namespace data:,wayscript.cog
            - a referential jointer declaration
            - content is a fragment preceded by a URI reference that is either:
                | a full URI
                    ( https://tools.ietf.org/html/rfc3986#section-1.1.1
                    ( https://tools.ietf.org/html/rfc3986#section-3
                    ( https://tools.ietf.org/html/rfc3986#section-3.1
                    - viz. having a scheme
                | a *path-absolute*
                    ( https://tools.ietf.org/html/rfc3986#section-3.3
                    - it will be resolved in waycast space
                        ( see § referent resolution
                    - no allowance for relative paths
                        - e.g. beginning with a '.', '..' or file name
                        - reason
                            - to ease the tracing of a way that extends across multiple documents
                            - relative paths are harder to follow
                                ( see e.g. normalizeURL in http://reluk.ca/project/wayic/read/readable.js
                | a *same-document reference*
                    ( https://tools.ietf.org/html/rfc3986#section-4.4
        - referential jointers are written in two forms:
            § Bitform referential jointer
            § Hyperform referential jointer
    - referent resolution
        - the URI reference is resolved in waycast space
            ( q,v. in § cast element
        - this (together with the restriction against relative paths)
          ensures that any reference needing resolution (not a full URI)
          resolves to a referent in the same waycast
            - why this constraint is wanted: self containment for the sake of portability
                - especially for the purpose of propagation
                    ( http://reluk.ca/project/waycast/engineer/wayics/cast/way.xht#ever_F
        - if the terminal path component is a directory
            - so indicated by a terminating slash '/'
            - then 'way.xht' is assumed as the file name
        - the URL must include a fragment to identify the subjoining waybit
  / - looped referential jointing
  /     - may occur when the subjoining waybit is an ancestor waybit
  /     - formally allowed though it is not always guaranteed to make sense
  // till I encounter the need in practice, and can give that as an example

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Referential joint`
    ( ./referential_joint#referential_joint
    [ purpose
        - two fold
        1 modeling a single way with separately declared waybits
        2 enabling a waybit (in effect) to nest at multiple places in the same model
            - such that multiple elements are parents of this waybit
                - their common child
            - or
                ( closer to the meaning of element nests
                - such that multiple wholes share the part which is represented by this waybit in common
                    < see nesting in § Attributive grouping
                - or that multiple derivatives (effects or dependants)
                  derive from this common origin (cause, premise, means or what not)
                    < see § Nesting of waybit elements
                = stop implying it must be one or the other of the above
                    - as just 'or' implies
    [ form
        - two elements
            - a referrer (jointer)
                ( § Referential jointer
            - its referent (subjoining waybit)
                ( § Subjoining waybit
        - the mapping between jointers and referential joints entire is 1:1
            - each jointer effectively declares a separate joint
            ( the same is not true of subjoining waybits, which map to referential joints 1:N
        - joint is declared unidirectionally
            - from jointer to subjoining waybit
          / - except in the case of looped referential jointing, q.v.
            - for sake of general simplicity and robustness
                - subordinate building blocks (e.g. underbits) can be implemented
                  blind to the uses (overbits) they will be put in future
                    - discourages unecessary overbit attachements/assumptions
                      that would tend to increase complexity
                      and decrease robustness of the overall structure
                - a node (e.g. overbit) can fully define its own edges
                    - no underbit being able to contradict the definition
                    - which simplifies machine (and human) processing of the structure
    [ effect
        - the effect of a referential joint is determined by would-be wayscript changes
          (effective changes) as the effect the changes would introduce
        - effective changes of a referential joint:
            * any referential joint
                - the subjoining waybit gains a parent (effective parent)
                  which is the parent of the jointer
                    - in addition to its declared parent
            * bitform referential joint
                ( additional to the above
                - where it infrabuts the effective parent, the subjoining waybit:
                    - takes the local name of the bitform jointer
                        - which thereby masks (at this location) its declared local name
                    - takes all attributes of the bitform jointer
                        - which thereby extend and/or mask (at this location) its declared attributes
                - the bitform jointer is removed
                - in other words, the subjoining waybit (at this location)
                  pretty much merges with the jointer
    [ causality and dependence relations
        - owing to how the effect of a referential joint is determined
            ( § Referential joint § effect
            - no referential joint can bring its subjoining waybit into a relation of causality
              in the role of effect
            - nor of dependence in the role of dependant
        - adding a nested waybit to a hyperform jointer (the only form that allows such addition)
            - thus bringing it into a relation of causality or dependence
            - would not bring the subjoining waybit into the same relation
        - the subjoining waybit (in gaining the same parent) becomes a *sibling* to the jointer
            ( § Referential joint § effect § effective changes of a referential joint
            - separate of the jointer and its content

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Step`
    < namespaced data:,wayscript.bit.step
    - modelling a volitive part of a way
        - a distinct|discrete act
        - e.g. a step or stage in a plan
    - nesting of step elements formalizes an order condition among the steps
        ( see also § Nesting of waybit elements
        - example [ETO]

              <step:s3> Step 3
                  <step:s2> Step 2
                      <step:s1> Step 1

            - meaning
                - step 3 must succeed step 2
                - step 2 must succeed step 1
                - relative to each other, the steps must execute in the declared order
        - counter example

              <step:s1> Step 1
              <step:s2> Step 2
              <step:s3> Step 3

            - meaning: steps 1, 2 and 3 are independent of each other
                - relative to each other, they may execute in any order

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Subjoining waybit`
    [ form
        * *id* attribute
            < no namespace
            - content: XML ID, unique within document
                - stricter than the formal requirement of HTML
                - to be on the safe side, pending any urgent cause for a looser form
        + constraints
            ( the conditions of a subjoining waybit, which determine it as such
            - it is a waybit
            - it has an *id* attribute in proper form
            - it is referenced by a referential jointer

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waybit`
    ( ./waybit#waybit
    + names
        < the naming of waybits
        - naming is free-form
            - except for reserved names
        - purpose of names
            - to help the reader understand the waybits
                - their relations
                - and the larger ways [they compose]
                - to bring out their meaning
            - to serve as placeholders for waybits
                - especially in the more compressed views
                - the names will stand in for the waybits
      / - best not be indispensible to the meaning of the waybit
      /     - ∵ a bitform jointer (within its context) may effectively change the subjoining waybit name
      // no room here for wayscripting tips, which would need clarifying by example script
        - reserved names
            - names beginning with an underscore ‘_’ are reserved
                - do not use such names for normal purposes
        - a name of '_' means no name (anonymous waybit)
    + types
        < types of waybit
        * waybit simply
            < namespaced data:,wayscript.bit
        * step
            ( see §

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waycast space`
    - a waycast space is a URI resolution context whose base URI identifies a waycast base directory
        ( https://tools.ietf.org/html/rfc3986#section-5
    - its main purpose is to resolve the URI references of hyperlinks and referential joints
    - for each URI reference in waycast space
        - if it has *path-absolute* form
            ( https://tools.ietf.org/html/rfc3986#section-3.3
        - then its leading '/' stands for the base directory of the waycast

    ════════════════════════════════════════════════════════════════════════════════════════════════════
    Note`

    [ETO]  End tags omitted.  Here the XML end tags are omitted for sake of clarity.


                                     Copyright © 2017-2018 Michael Allan and contributors.  Licence MIT.
