wayic.script/doc.task - Documentation in rough

    - begin at § practical constraints § minimal

    ____________________________________________________________________________________________________
    commitment declaration`
    - a type of bitform waylink
    [ intracast
        ( intracast commitment declaration
        - currently documented in source text of http://reluk.ca/project/waycast/way.xht#commitment
            = copy that documentation to here
    [ intercast
        ( intercast commitment declaration
        - see wayic.intercast § commitment declaration § intercast

    ____________________________________________________________________________________________________
    composer elements and composition`
    - one waybit (whole, composite) logical containing another (part, component)
    [ comprising
        < cog:comprising, namespace data:,wayscript.cog
        - exclusive composer
        - this composer (or composer cohort) defines all parts of its waybit parent
            - the parent has no other parts
    [ including
        < cog:including, namespace data:,wayscript.cog
        - inclusive composer
        - this composer (or composer cohort) defines some parts of its waybit parent
            - but not necessarily all
    - placement: child of waybit element
    - content
        * leader (optional)
            - non-wayscript
                - normally a short text phrase
            - qualifies or explains the composition in some way
        * components
            - waybits
            - their order as siblings is irrelevant
    - purpose
        - to declare a compositional relation among waybits
            - one waybit (whole, composite) containing another (part, component)
            - e.g. "in saying *this* waybit I mean also *these* waybits which are its parts"
        - cf. § waypath relations
    - example
          <P>
              <cog:including>
                  <C/>
                  <D/>
                  <E/>
                  <F/>
                  </cog:including>
              <X/>
              <Y/>
              <Z/>
              </P>
        - P has parts C, D, E, F
        - P has underbits X, Y and Z
    - composer cohort
        - a composer cohort is all sibling composers of parent waybit taken together
        - purpose: to divide the parts into anonymous groups
            - one per sibling
        - example
              <P>
                  <X/>
                  <cog:including>
                      <C/>
                      <D/>
                      </cog:including>
                  <Y/>
                  <cog:including>
                      <E/>
                      <F/>
                      </cog:including>
                  <Z/>
                  </P>
            - P has parts C, D and parts E, F
            - P has underbits X, Y and Z
            - the ordering here is abnormal
                - normally the composer (*including*) elements would be written
                  before their waybit siblings X, Y and Z
    - design note
        - not defining a waybit's parts by elemental containment
            - because containment instead defines its underbits
            - in most scripted ways
                - the underbits will be more important than the parts
                - if not more numerous
                - and containment is the most convenient and transparent form of defining them

    ____________________________________________________________________________________________________
    design constraints`
    [ ⤓ minimal
        - wayscript's necessary form
        * XML-format HTML (XHTML)
            ( http://w3c.github.io/html/introduction.html#html-vs-xhtml
            ( http://w3c.github.io/html/infrastructure.html#xml
            ( http://w3c.github.io/html/xhtml.html
            - HTML
                ∵ wayscript is basic to the waycast
                ∵ the *waycast* is public
                    ( http://reluk.ca/project/waycast/engineer/wayics/cast/way.xht#availability
                ∵ the premiere medium of *publication* today is the web
                ∵ the basic script of the *web* is HTML
                ∴ HTML
            - XML format
                ∵ XML facilitates coping with the specialized elements and attributes of wayscript
                    - these aspects of XML in particular:
                        - namespacing
                        - strict syntax and parsing
                    - they facilitate:
                        - defining the specialized elements and attributes of wayscript
                        - writing them in source
                        - processing them at runtime

    ____________________________________________________________________________________________________
    HTML inclusions`
    - allowed
    - hyperlinks within wayscript
        - the *href* attribute of the *a* element is resolved in waycast space
            ( q,v. in § cast element

    ____________________________________________________________________________________________________
    location`
    - executable wayscript is restricted to URL paths that end in '/way.xht'
    - in practice this means:
        - when storing wayscript in a file, name the file 'way.xht'
    - the purpose of this constraint is to simplify automated tracing of interdocument way declarations
        - those that extend across multiple, linked documents

    ____________________________________________________________________________________________________
    namespace`
    - XML namespaces for wayscript
    - hierarchy
        * supernamespace
            - examples
                < data:,wayscript.
                < data:,wayscript.bit.
        * subnamespace
            - also '*'
            - examples
                < bit
                < bit.step
                < step
    [ bit
        < data:,wayscript.bit
        - namespace of waybits simply, excluding subspaced waybits such as steps
    * bits
        < data:,wayscript.bit.*
        - namespaces of bit subtypes
            - such as step
            - or others independently defined elsewhere
    [ cog
        < data:,wayscript.cog
        - general-purpose namespace
    [ step
        < data:,wayscript.bit.step
        - namespace of steps
    * wayscript
        < data:,wayscript.*
        - supernamespace of all wayscript

    ____________________________________________________________________________________________________
    practical constraints`
    [ ⤓ minimal
        - what the wayscribe must have
        * a basic knowledge of wayscript
            - begin at:
                § location
                § waypath relations among waybits
        * a waycast
            ( http://reluk.ca/project/wayic/cast/
            - wayscript is proper to the waycast
        * a web renderer
            | wayic.read
                ( http://reluk.ca/project/wayic/read/
                - there's no other at present

    ____________________________________________________________________________________________________
    step`
    < namespaced data:,wayscript.bit.step
    - a volitive waybit
        - a distinct|discrete act
        - e.g. a step or stage in a plan
    - enactment order is defined as a waypath relation (§ q.v.)
        - by nesting prior steps within subsequent steps
        ( again not as a sibling relation

    ____________________________________________________________________________________________________
    waybit`
    ( waybit#waybit
    - naming
        - naming is free-form
            - except for reserved names
        - purpose of names
            - to help the reader understand the waybits
                - their relations
                - and the larger ways [they compose]
                - to bring out their meaning
            - to serve as placeholders for waybits
                - especially in the more compressed views
                - the names will stand in for the waybits
      / - best not be indispensible to the meaning of the waybit
      /     - ∵ a bitform waylink source (within its context) may effectively change the target name
      // no room here for wayscripting tips, which would need clarifying by example script
        - reserved names
            - names beginning with an underscore ‘_’ are reserved
                - don’t use such names for normal purposes
        - a name of '_' means no name (anonymous waybit)
    - relations
        - composition, see §
        - waypath, see §
        - the sibling relation has no generally defined meaning
    - types
        * waybit simply
            < namespaced data:,wayscript.bit
        * step
            ( see §

    ____________________________________________________________________________________________________
    waycast space`
    - a waycast space is a URI resolution context whose base URI identifies a waycast base directory
        ( https://tools.ietf.org/html/rfc3986#section-5
    - its main purpose is to resolve the URI references of waylinks and hyperlinks
    - for each URI reference in waycast space
        - if it has *path-absolute* form
            ( https://tools.ietf.org/html/rfc3986#section-3.3
        - then its leading '/' stands for the base directory of the waycast

    ____________________________________________________________________________________________________
    waylink`
    - a waylink is a relation between two elements: a source node and a target node
    - purpose: to declare a waypath relation with a remotely declared waybit
    - the mapping between source nodes and waylinks entire is 1:1
        - each source node effectively declares a separate waylink
        ( the same is not true of target nodes, which map to waylinks 1:N
    - linkage is declared unidirectionally
        - from source node to target node
      / - except in the case of a waypath loop, q.v.
        - for sake of general simplicity and robustness
            - subordinate building blocks (e.g. underbits) can be implemented
              blind to the uses (overbits) they will be put in future
                - discourages unecessary overbit attachements/assumptions
                  that would tend to increase complexity
                  and decrease robustness of the overall structure
            - one node of the relation (e.g. overbit) can fully define its edges
                - no underbit being able to contradict the definition
                - which simplifies machine (and human) processing of the structure
    [ target node: the *id* attribute
        < no namespace
        - content: XML ID, unique within document
            - stricter than the formal requirement of HTML
            - to be sure, pending any urgent cause for a looser form
        - the conditions of a waylink target node, which define it as such:
            - it is a waybit
            - it has an *id* attribute in proper form
            - it is targeted by a waylink source node
    [ source node: the *link* attribute
        < cog:link, namespace data:,wayscript.cog
        - a waylink source node declaration
        - content is a fragment preceded by a URI reference that is either:
            | a full URI
                ( https://tools.ietf.org/html/rfc3986#section-1.1.1
                ( https://tools.ietf.org/html/rfc3986#section-3
                ( https://tools.ietf.org/html/rfc3986#section-3.1
                - viz. having a scheme
            | a *path-absolute*
                ( https://tools.ietf.org/html/rfc3986#section-3.3
                - it will be resolved in waycast space
                    ( see § target resolution
                - no allowance for relative paths
                    - e.g. beginning with a '.', '..' or file name
                    - reason
                        - to ease the tracing of a way that extends across multiple documents
                        - relative paths are harder to follow
                            ( see e.g. normalizeURL in http://reluk.ca/project/wayic/read/readable.js
            | a *same-document reference*
                ( https://tools.ietf.org/html/rfc3986#section-4.4
                - thus targeting a node in the same document
        - target resolution
            - the URI reference is resolved in waycast space
                ( q,v. in § cast element
            - this (together with the restriction against relative paths)
              ensures that any reference needing resolution (not a full URI)
              resolves to a target in the same waycast
                - why this constraint is wanted: self containment for the sake of portability
                    - especially for the purpose of propagation
                        ( http://reluk.ca/project/waycast/engineer/wayics/cast/way.xht#ever_F
            - if the terminal path component is a directory
                - so indicated by a terminating slash '/'
                - then 'way.xht' is assumed as the file name
            - the URL must include a fragment to identify the target node
      / - waypath loop
      /     - may occur when the target node is an ancestor waybit
      /     - formally allowed though it's not always guaranteed to make sense
      // till I encounter the need in practice, and can give that as an example
        - two forms of waylink source node are defined:
            + bitform
                - placement: as a waybit
                - form
                    - no content
                        - the source's effective content will be that of target
                    - no *id* attribute
                        - disallowed
                        - thereby enabling it also to serve as a target node
                        - reason: in some applications, it might be infeasible to represent
                            - e.g. where the application gives to source and target nodes
                              distinct representations that would be difficult to combine as one
                    - a local name of '_same' means *same as the target name*
                        - effectively it has the same name as the target node
                    - must have the same namespace as the target node
                        ( or it's an error
                        < e.g. only a step can target a step
                - effect
                    - the content of the source node is declared to be logically identical
                      to that of the target node
                    - visually a bitform waylink might be represented in different ways, including:
                        | by a hyperlink from source to target
                        | by placing a replica of the target's content in the source
            + hyperform
                - placement: as an HTML *a* element that descends from a waybit
                - form
                    - no *href* attribute
                        - disallowed
                        - the reference is given by the *link* attribute instead
                - effect
                    - the target node gains a waypath relation as though it were co-located
                      with the *a* element

    ____________________________________________________________________________________________________
    waypath relations`
    - wayscript is basically the declaration of waypath relations among waybits
    - a waypath relation is declared either by nesting one waybit declaration in another
        - or by an equivalent waylink declaration
    - waypath relations are dependency relations
        - but 'depend' is not the preferred term here
        - unfortunately it suggests a thing that hangs below
            - which is contradictory in this context
            - where what depends (the dependant) is written above its dependencies
            - which nest inside of it
    [ examples of nesting

        * simple
            - one relation

            <waybit>
                <waybit/>
                </waybit>

        * more typical
            - many relations and interrelations

            <waybit>
                <waybit>
                    <waybit/>
                    </waybit>
                <waybit/>
                <waybit/>
                <waybit>
                    <waybit/>
                    <waybit>
                        <waybit/>
                        <waybit/>
                        </waybit>
                    <waybit/>
                    </waybit>
                </waybit>

        + in terms of meaning
            * general

                <dependant>
                    <dependency/>
                    </dependant>

            * specific

                <end>
                    <means/>
                    </end>

                <conclusion>
                    <premise/>
                    </conclusion>

                <successor>
                    <predecessor/>
                    </successor>

                <step_3>
                    <step_2>
                        <step_1/>
                        </step_2>
                    </step_3>

                <supported>
                    <supporter/>
                    </supported>

        + in formal terms
            * arboreal
                - common

                <root>
                    <branch>
                        <leaf/>
                        </branch>
                    <leaf/>
                    <leaf/>
                    <branch>
                        <leaf/>
                        <branch>
                            <leaf/>
                            <leaf/>
                            </branch>
                        <leaf/>
                        </branch>
                    </root>

                - other useful terms
                    - 'rootward'
                    - 'rootmost'
                        - most rootward
                    - 'leafward'
                    - 'leafmost'
                        - most leafward
                    - 'stem'
                        - immediate rootward waybit
                        - parent, in genealogical terms

            * over-under
                - specific to wayscript
                - applies only to waybits

                <overbit>
                    <underbit/>
                    </overbit>

                - its utility is in specifying the type of elements that are related
                    - each of 'overbit' and 'underbit' implies a relation
                      between descendant and ancestor elements wherein both elements are waybits
                - other useful terms
                    - 'direct overbit'
                        - implies a waybit child
                    - 'direct underbit'
                        - implies a waybit parent
            * genealogical
                - conventional for XML

                <parent>
                    <child/>
                    <child/>
                    </parent>

                - other useful terms of genealogy
                    - for any two children of the same parent, each is a 'sibling' of the other
                    - 'ancestor' and 'descendant' are also common
              / - unfortunately the words 'parent' and 'child' may suggest
              /   a relation between guardian and dependant
              /     - which is contradictory in this context
              /     - because here the 'parent' waybit depends on the 'child' waybits
              // negligible in practice, because it's the convention
    [ waylink examples

        <step_3 id='s3'>
            <step_2>
                <step_1/>
                </step_2>
            </step_3>

        <step_5a>
            <step_4a>
                <step_3 cog:link='s3'/>
                </step_4a>
            </step_5a>

        <step_5b>
            <step_4b>
                <step_3 cog:link='s3'/>
                </step_4b>
            </step_5b>

        - here step_1 (or step_2, or step_3) is an indirect underbit of both step_5a and 5b
    [ waylink dependencies
        - place bitform waylink dependencies as siblings of the waylink declaration
        - two reasons for this placement:
            1. a bitform waylink source node declaration allows no content, no underbits
                - therefore its dependencies cannot be its underbits
            2.
                - consider the common situation in which a dependency is justification or other warrant
                  for the inclusion of the waylink
                - such a warrant will often refer both to the link and its parent
                    - because what it warrants is the parent's *inclusion* of the link
                - placement of the the warranting waybit as a sibling of the link
                    - and thus also as a direct underbit of the parent
                    - gives it a direct connection to both of the referenced nodes
                        - parent and link



                                     Copyright © 2017-2018 Michael Allan and contributors.  Licence MIT.
