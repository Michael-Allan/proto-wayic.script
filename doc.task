wayic.script/doc.task - Documentation in rough

    < ./wayscript

    + formal summary
        - XML syntactic hypertext
            ( § Design constraints § XML syntactic hypertext (XHTML)
            § Namespacing
            § HTML attribution

        § Waybit
            § Step

        § Attributive grouping
        § Nesting of waybit elements
        § Referential jointing

    + operative context
        - a way declaration document
            ( § Design constraints § operation in the context of a way declaration document

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Attributive grouping`
    - a waybit element nested in an attributive group element nested in a waybit element
    - modelling a relation of inherence or subsistence of one way part in another
        ( see § Modelled way relation
    - example [ETO]

          <A>
              <way:group rel='in'>
                  <P>

        - meaning: part P inheres in whole A, or subsists in whole A
    [ *group* element
        < way:group, namespace data:,wayscript
        - placement: child of waybit element
        - content
            + qualifying text
                < optional
                - to explain, describe or otherwise qualify the composition
                - placement: leading child
                - typically a short phrase terminated by a colon
                - example

                      <A>
                          <way:group rel='in'> including:
                              <P>
                              <Q>
                      <B>
                          <way:group rel='in'> comprising:
                              <P>
                              <Q>

                    - meaning
                        - whole A has parts P and Q
                        - whole B has parts P and Q only
                        - and, by the way:
                            - wholes A and B are peers, and in each
                              parts P and Q are peers
                                ( § Level conjunction of waybit elements
            + one or more waybits
                - each to model a part that inheres or subsists
        + *rel* attribute
            < mandatory, no namespace
            - to define the way relation between the waybit parent of the *group* element
              and each waybit child of the *group* element
            ( fashioned after the HTML *rel* attribute
                ( https://html.spec.whatwg.org/multipage/semantics.html#attr-link-rel
            - value: ‘in’
                - the ‘in’ value specifies a relation of inherence or subsistence
                    - it declares that the way parts modelled by the children of the group element
                      inhere or subsist *in* the whole modelled by its parent
                ( later the value format may be expanded to a set of space-separated tokens
                    ( https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#set-of-space-separated-tokens

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Bitform referential jointer`
    < a form of (§) referential jointer
    - a bitform referential jointer is a waybit with a *join* attribute
        ( § Referential jointer § *join* attribute
    - constraints
        - the jointer has the same namespace as its referent subjoining waybit
            ( e.g. only a step jointer can refer to a subjoining step
        - the jointer has no content
    - a jointer name of ‘_same’ means “same as the subjoining waybit”
        - a jointer local name declared as ‘_same’ is to be presented to document viewers
          (e.g. in the web interface) instead as the local name of the referent subjoining waybit

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Commitment declaration`
    < see also: commitment stemmaplasty
        ( http://reluk.ca/project/wayic/intercast/doc.task
    - a bitform referential joint to a resolve waybit
        - comprising the jointer (commitment jointer) and its referent
        - the subjoining resolve waybit
        -! clumsy form
            - clutters the way declaration with unrelated elements
            - requires initial copy of sibling elements in commitment stemmaplasty
              and subsequent maintenance work to keep them unchanged
            = mend by moving commitment declaration to waycaster configuration
                - there relating each commitment to its waybit by reference
    purpose: to declare an intent to act on a way part
    [ commitment jointer
        - a bitform referential jointer that refers to /way.xht#resolve
            - whereby the waycaster declares an active commitment
        - currently documented in waycast
            ( http://reluk.ca/project/waycast/way.xht#resolve
            = copy that documentation to here
        - the waycaster
            - should
                * place one in precisely each waybit of the larger way declaration
                  where he intends to act directly
                    - as a child of that waybit
                * set the node name to reflect the commited action
            - may
                * set a way:ordinal attribute to assign an intended order to the act
                    ( tasked as wayic.read § way:ordinal
                    - so prioritizing it relative to other declared commitments
        - implicitly the whole line of wayscript containing the jointer is uniquely personal
            ( wayic.copy § uniquely personal lines of text § implicit
            - a convienience
            - whence the bitform constraint on commitment jointers
                - a hyperform node might (and most often would) occupy but a part of the line
                    - making this convienience harder to implement
    [ resolve waybit
        - the waybit at waycast context location /way.xht#resolve
            - which is the waybit of the root way document that has an *id* attribute of ‘resolve’

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Design constraints`
    [ ⤓ minimal
        + XML syntactic hypertext
            - the basic form of wayscript is XML syntactic hypertext (XHTML)
                ( http://w3c.github.io/html/introduction.html#html-vs-xhtml
                ( http://w3c.github.io/html/infrastructure.html#xml
                ( http://w3c.github.io/html/xhtml.html
            ∴ hypertext
                ∵ the *waycast* is public
                    ( http://reluk.ca/project/waycast/constraints.xht#availability
                ∵ the premiere medium of *publication* today is the Web
                ∵ the basic script of the *web* is hypertext
            ∴ XML syntax
                ∵ XML facilitates coping with proper wayscript markup
                    - these aspects of XML in particular:
                        - namespacing
                        - strict syntax and parsing
                    - they facilitate:
                        - defining the markup's elements and attributes
                        - writing the markup
                        - processing it at runtime
        + operation in the context of a way declaration document
            - wayscript is properly interpreted only in the context of a way declaration document

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Extended element referencing`
    - referring to a wayscript element regardless of whether it has an *id* attribute
    + form
        ( [EBN]

          extended element reference = element identifier, [ ',', element-relative offset ] ;

              element identifier = ? XML Name, as per https://www.w3.org/TR/xml/#NT-Name ?;

              element-relative offset =  ? XPath relative path expression,
                as per https://www.w3.org/TR/xpath-3/#id-relative-path-expressions ?;

        * embedded in a URI reference
            - the characters '[' and ']' of an XPath predicate need not be percent encoded
              when the reference is embedded in the path, query or fragment component of a URI reference
                ( Predicates within steps, https://www.w3.org/TR/xpath-3/#id-predicate
                ( Percent-encoding, https://tools.ietf.org/html/rfc3986#section-2.1
            - this is a break with the IETF standard
                - but not with the WHATWG standard where these characters need be encoded
                  only as part of the *userinfo percent-encode set*
                    ( https://url.spec.whatwg.org/#percent-encoded-bytes
                - only in the authority component, that is
        * normal form
            = define this
    = task to implement in wayic.emacs
        - fontifying the *element-relative offset* to distinguish it from the element identifier
            - for sake of clarity
    = task to implement in wayic.read
        < cf. http://reluk.ca/project/wayic/read/project.task § Extended element referencing

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    HTML attribution`
    - the HTML attribution inherent in wayscript is standard except as noted here
    + *id* attribute
        < no namespace
        - its contraints are those of XML
            - tighter than plain HTML
            - why? to be on the safe side, pending cause for loosening
        - namely:
            - type: XML ID, unique within document
                ( https://www.w3.org/TR/xml/#sec-attribute-types
            - form: XML Name
                ( https://www.w3.org/TR/xml/#NT-Name
    + *href* attribute
        < no namespace, on *a* element only
        - either a URI, or a formally intracast reference
            ( http://reluk.ca/project/wayic/cast/doc.task § Formally intracast reference
            - formally intracast in compliance with design constraints
                ( http://reluk.ca/project/wayic/cast/doc.task
                    ( § Design constraints § relative referencing bounded by the waycast
        - fragment form: in case of a wayscript referent: extended element reference
            ( § Extended element referencing

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Hyperform referential jointer`
    < a form of (§) referential jointer
    - a hyperform referential jointer is an HTML *a* element with a *join* attribute
        ( § Referential jointer § *join* attribute
    - constraint: the jointer has no *href* attribute

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Level conjunction of elements`
    - one element in level conjunction with another
    + genealogical terms
        - the convention for both HTML and XML, thus also for wayscript
        - example [ETO]

              <A> Sibling
              <B> Sibling

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Level conjunction of waybit elements`
    - modelling a relation of community between way parts
        ( see § Modelled way relation
    - one waybit element in level conjunction with another
    - examples [ETO]
        + general

              <A>
              <B>

            - meaning: parts A and B are peers
            + formal, genealogical terms
                < as per § Level conjunction of elements, q.v.
                - referring to the empty form, implying no meaning

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Modelled way relations`
    - a modelled way relation is a way determinate relation between way parts
      which is represented in the way model as a relation between waybits
    ( cf. § Unmodelled way relations
    [ form
        - see § types of relation §§ modelled form, below
        - combined example [ETO]

              <C>
                  <way:group rel='in'>
                      <P>
                      <Q>
                  <B>
                      <A>

            - meaning
                - parts P and Q inhere in part C, or subsist in part C
                - parts P and Q are peers in part C
                - part C depends on part B, or is caused by part B
                - part B depends on part A, or is caused by part A
    [ typology
        - types of relation, here categorized in Kantian terms
            ( Kant, Table of Categories, A80/B106
            ( cf. A336/B393 where he applies these categories (below) to conditional relations
        + inherence and subsistence
            ( I take it subsistence here means subordinate existence
            ' *substantia et accidens*
                ( meaning essence and accidents
                ( cf. Fred Brooks, 1987, No silver bullet: essence and accidents of software engineering
            - one way part inhering in another, or subsisting in another
            - modelled form
                | a waybit element nested in an attributive group element nested in a waybit element
                    ( § Attributive grouping
                    - example [ETO]

                          <B>
                              <way:group rel='in'>
                                  <A>

                        - meaning: part A inheres in whole B, or subsists in whole B
        + causality and dependence
            - one way part causing another as an effect, or having another as a dependant
            - modelled form
                | one waybit element nested in another
                    ( § Nesting of waybit elements
                    - example [ETO]

                          <B>
                              <A>

                        - meaning: part A causes part B, or part B depends on part A
        + community
            ' reciprocity between agent and patient
            - the co-occurence of two way parts, neither subordinate to the other
                ( B112-3
                - relations of peerage
            - modelled form
                | one waybit element in level conjunction with another
                    ( § Level conjunction of waybit elements
                    - example [ETO]

                          <A>
                          <B>

                        - meaning: parts A and B are peers

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Namespacing`
    ( https://www.w3.org/TR/xml-names/
    [ terms
        * para-namespace
            - a false namespace whose identifier preposes that of a true namespace (subnamespace)
                - as for instance 'foo.' preposes 'foo.bar'
                ( 'prepose' not 'prefix' which already has a different meaning in XML namespaces
            - an abstract category of namespaces
                - itself not a namespace, not usable in wayscript
            - examples

                  data:,wayscript.

                  data:,wayscript.bit.

        * subnamespace
            - a true namespace that belongs to a para-namespace
                - whose identifier begins, in other words, with the identifier of the para-namespace
            - examples

                  data:,wayscript.bit

                  data:,wayscript.bit.step

    [ hierarchy
        - here is the namespace hierarchy of wayscript proper
        - each namespace is identified together with its traditional, simple prefix (in brackets)

            +(way) data:,wayscript
                < top namespace

                * data:,wayscript.
                    < top para-namespace, to which all proper wayscript subnamespaces belong

                    +(bit) data:,wayscript.bit
                        < namespace of waybits proper, excluding namespaced subtypes such as steps

                        * data:,wayscript.bit.
                            < para-namespace of waybit subtypes, such as step

                            +(step) data:,wayscript.bit.step
                                < namespace of steps
    [ notation
        - descriptive conventions
        * sub-identifier
            - a partial identifier of a subnamespace
                - unique only within the context of a para-namespace
            - within that context
                - any subnamespace may be uniquely identified by a sub-identifier
                - which is formed by removing the preposing para-namespace identifier
            - examples of sub-identifiers

                  bit

                  bit.step

                  step

            * top sub-identifier
                - a sub-identifier in the context of the top para-namespace (data:,wayscript.)
                - examples of top sub-identifiers

                      bit

                      bit.step

        * wild cards
            - multiple subnamespaces may be symbolized by a ‘*’ wild card appended to a para-namespace
            - examples
                - waybit namespaces

                      data:,wayscript.bit*

                - waybit subnamespaces

                      data:,wayscript.bit.*

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Nesting of elements`
    - one element nested in another
    - terms
        + genealogical
            - the convention for both HTML and XML, thus also for wayscript
            - examples [ETO]

                  <B> Parent
                      <A> Child

                  <B> Ancestor
                        ⋱
                        <A> Descendant

        + arborescent
            - examples [ETO]

                  <C> Root
                        ⋱
                        <B> Branch
                              ⋱
                              <A> Leaf

                  <B> Stem
                      <A>

        + coined
            * infrabut
                ( ./infrabut
            * suprabut
                ( ./suprabut
            - examples [ETO]

                  <B> Suprabutting
                      <A> Infrabutting

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Nesting of waybit elements`
    - one waybit element nested in another
    - modelling a relation of causality or dependence between way parts
        ( see § Modelled way relation
    - examples [ETO]
        + general
            - causality or dependence

              <B>
                  <A>

            - meaning: part A causes part B, or part B depends on part A
            + formal terms
                - referring to the empty form, implying no meaning
                + genealogical
                + arborescent
                + coined
                    < all as per § Nesting of elements, q.v.
                + spatial

                      <B> Overbit
                            ⋱
                            <A> Underbit
        + causality

              <B> Effect
                  <A> Cause

            - meaning
                - cause A conditions effect B
                - cause A is the reason for effect B
        + dependence
            - dependence is expected to predominate over causality in a typical waycast

              <B> Dependant
                  <A>

            - meaning: dependant B depends on part A
                ( one might attach the name ‘Dependency’ to A, but that would be non-standard English
            - taking ‘dependence’ in its original sense of down hanging
                - note that the nested form turns it upside down
                - visually B depends (hangs down) from A
            + logical dependence
                - viz. in the logical parts of a way

                  <B> Conclusion
                      <A> Premise

                - meaning: from premise A one infers conclusion B
            + practical dependence
                - viz. in the practical parts of a way
                + means-end relation

                      <B> End
                          <A> Means

                    - meaning
                        - by means A one attains end B
                        - to be sure, also implied is a reverse dependence:
                            - end B warrants means A
                            - in other words
                                - end B conditions means A
                                - end B is the reason for means A
                                - the rationality of employing means A
                                  depends on the will to attain end B
                + order condition
                    ( from § Step

                      <step:s3> Step 3
                          <step:s2> Step 2
                              <step:s1> Step 1

                    - meaning
                        - step 3 must succeed step 2
                        - step 2 must succeed step 1

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Referential jointing`
    < surtype: intercast linkage
        ( [IR]
    - making referential joints
        ( ./referential_joint
        - an alternative to direct junction by nested abutment
            ( cf. §§ Nesting of elements & Nesting of waybit elements
    [ purpose
        - two fold
        1 modeling a single way with separately declared waybits
        2 enabling a waybit (in effect) to nest at multiple places in the same model
            - such that multiple elements are parents of this waybit
                - their common child
            - or
                ( closer to the meaning of element nests
                - such that multiple wholes share the part which is represented by this waybit in common
                    < what nesting means in § Attributive grouping
                - or that multiple derivatives (effects or dependants)
                  derive from this common origin (cause, premise, means or what not)
                    < what nesting means in § Nesting of waybit elements
                - or some combination of these
                    - in one place the waybit being a part
                        ( § Modelled way relations § inherence and subsistence
                    - in another a cause or means
                        ( § Modelled way relations § causality and dependence
    [ form
        - a joint is formed of two elements
            - a referrer
                - typically a (§) referential jointer
            - its referent
                - a waybit that would be valid as a subjoining waybit
                    ( § Subjoining waybit § contraints
        - the mapping between jointers and joints entire is 1:1
            - each jointer effectively declares a separate joint
            ( the same is not true of subjoining waybits, which map to joints 1:N
        - the joint is declared unidirectionally
            - from jointer to subjoining waybit
            - for sake of general simplicity and robustness
                - subordinate building blocks (e.g. underbits) can be implemented
                  blind to the uses (overbits) they will be put in future
                    - discourages unecessary overbit attachements/assumptions
                      that would tend to increase complexity
                      and decrease robustness of the overall structure
                - a node (e.g. overbit) can fully define its own edges
                    - no underbit being able to contradict the definition
                    - which simplifies machine (and human) processing of the structure
    [ effect
        - the effect of a referential joint is determined
          by definite, but hypothetical wayscript changes (effective changes)
        - its effect is what the effective changes would introduce
        - effective changes of a referential joint:
            * any referential joint
                - the subjoining waybit gains a parent (effective parent)
                  which is the parent of the jointer
                    - in addition to its declared parent
            * bitform referential joint
                ( additional to the above
                - where it infrabuts the effective parent, the subjoining waybit:
                    - takes the local name of the bitform jointer
                        - which thereby masks (at this location) its declared local name
                    - takes all attributes of the bitform jointer
                        - which thereby extend and/or mask (at this location) its declared attributes
                - the bitform jointer is removed
                - in other words, the subjoining waybit (at this location)
                  pretty much merges with the jointer
    [ causality and dependence relations
        - owing to how the effect of a referential joint is determined
            ( § Referential joint § effect
            - no referential joint can bring its subjoining waybit into a relation of causality
              in the role of effect
            - nor of dependence in the role of dependant
        - adding a nested waybit to a hyperform jointer (the only form that allows such addition)
            - thus bringing it into a relation of causality or dependence
            - would not bring the subjoining waybit into the same relation
        - the subjoining waybit (in gaining the same parent) becomes a *sibling* to the jointer
            ( § Referential joint § effect § effective changes of a referential joint
            - separate of the jointer and its content
  / [ looped referential jointing
  /     - an edge case in which the subjoining waybit is an ancestor of the referrer
  /     - formally allowed though not guaranteed to make sense
  // till I have a need to document this, and hopefully a practical example, or counter example

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Referential jointer`
    ( ./referential_jointer
    - form, one of
        *§ Bitform referential jointer
        *§ Hyperform referential jointer
    - function
        - (§) referential jointing
        - it declares a referential joint
    + *join* attribute
        < way:join, namespace data:,wayscript
        - a (§) subjoining waybit reference

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Step`
    < surtype: waybit
    - typology
        ( see also § Waybit § typology
        * step
            < data:,wayscript.bit.step* >
            * proper step
                < data:,wayscript.bit.step >
    - a model of a volitive way part
        - of a deliberate act as it contributes to the way
        - as with a procedural step or stage of a plan
    - nesting of step elements formalizes an order condition among the steps
        ( see also § Nesting of waybit elements
        - example [ETO]

              <step:s3> Step 3
                  <step:s2> Step 2
                      <step:s1> Step 1

            - meaning
                - step 3 must succeed step 2
                - step 2 must succeed step 1
                - relative to each other, the steps must execute in the declared order
        - counter example

              <step:s1> Step 1
              <step:s2> Step 2
              <step:s3> Step 3

            - meaning: steps 1, 2 and 3 are independent of each other
                - relative to each other, they may execute in any order

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Subjoining waybit`
    ( ./subjoin
    - constraints
        ( the conditions of a subjoining waybit, which determine it as such
        - it is a waybit
        - it is the referent of a referential jointer
        - it has no *join* attribute
            - whereby it would serve also as a bitform referential jointer
              with a subjoining waybit of its own
            - whereby each of its jointers together with it and its subjoining waybit
              would form a double joint
                - a joint to a joint
            - disallowed
            - reasons
                - double jointing has no clear use case to justify its attendant complications
                - double jointing might over-constrain the presentation of the way model in practice
                    - e.g. where an application would give to jointer and subjoining waybit
                      distinct yet overlapping presentations that are difficult to combine
                      in a single element

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Subjoining waybit reference`
    * form
        ( [EBN]

          subjoining waybit reference = formally intracast reference with fragment ;

        ( formally intracast reference with fragment, http://reluk.ca/project/wayic/script/doc.task
        - formally intracast in compliance with design constraints
            ( http://reluk.ca/project/wayic/cast/doc.task
                ( § Design constraints § relative referencing bounded by the waycast
    * resolution
        - the fragment is resolved as an extended element reference

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waybit`
    ( ./waybit
    - typology
        ( with namespacing < ⋯ >
            ( cf. § Namespacing § hierarchy
        * waybit
            < data:,wayscript.bit* >
            * proper waybit
                < data:,wayscript.bit >
            * step
                < data:,wayscript.bit.step* >
                * proper step
                    < data:,wayscript.bit.step >
    - naming
        - the naming of waybits is free form except for certain reserved names
            ( § reserved names
        - a name of ‘_’ means no name (anonymous waybit)
        * purpose
            - the name helps the reader to understand the waybit
                - bringing out its meaning
            - the name serves as a placeholder for the waybit
                - standing in for the waybit
                - e.g. in collapsed or otherwise compressed views of the way model
        * reserved names
            - names beginning with an underscore ‘_’ are reserved
                - assign no such name unless instructed by a formal rule
    - publication
        * waybit public identifier
            ( form [EBN]

              waybit public identifier = waycast public identifier, dotless relative path,
                '#', extended element reference in normal form ;

                  waycast public identifier = ? as per
                    http://reluk.ca/project/wayic/cast/doc.task § Publication of a waycast ?;

                  dotless relative path = ? a relative path reference without a dot segment, as
                    per https://tools.ietf.org/html/rfc3986#section-3.3 (dot-segment)
                    and https://tools.ietf.org/html/rfc3986#section-4.2 (relative-path) ?;

                  extended element reference in normal form = ?
                    as per § Extended element referencing § form § normal form ?;


////////////////////////////////////////////////////////////////////////////////////////////////////////
// N o t e s
/
   [EBN]  Extended Backus-Naur syntax notation, ISO/IEC 14977.
            ( http://standards.iso.org/ittf/PubliclyAvailableStandards/index.html
            ( https://www.cl.cam.ac.uk/~mgk25/iso-14977.pdf
            ( summary, https://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_form

   [ETO]  End tags omitted.  Here the XML end tags are omitted for sake of clarity.

   [IR] · Applies only for those instances which are based on an import reference.
            ( http://reluk.ca/project/wayic/intercast/doc.task



                                     Copyright © 2017-2018 Michael Allan and contributors.  Licence MIT.
