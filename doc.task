wayic/script - Wayscript / documentation in rough

    - begin at § practical constraints § minimal

    ____________________________________________________________________________________________________
    cast element`
    < cog:cast, namespace data:,wayscript.cog
    - properties of the larger waycast wherein the document is stored
    - placed in document head
    * base attribute
        < no namespace
        - the relative URL path to the base directory of the waycast
        - examples
            - for document waycast/one/way.xht,     <cog:cast base='..'>
            - for document waycast/one/two/way.xht, <cog:cast base='../..'>
    - purpose: to enable resolution of URLs in waycast space
    - waycast space
        - a URL space that is rooted on the waycast
        - e.g. the URLs of waylinks and hyperlinks
    - for all URLs in waycast space that begin with a slash '/'
        - the leading '/' stands for the base directory of the waycast

    ____________________________________________________________________________________________________
    composer elements and composition`
    - one waybit (whole, composite) logical containing another (part, component)
    [ comprising
        < cog:comprising, namespace data:,wayscript.cog
        - exclusive composer
        - this composer (or composer cohort) defines all parts of its waybit parent
            - the parent has no other parts
    [ including
        < cog:including, namespace data:,wayscript.cog
        - inclusive composer
        - this composer (or composer cohort) defines some parts of its waybit parent
            - but not necessarily all
    - placement: child of waybit element
    - content
        * leader (optional)
            - non-wayscript
                - normally a short text phrase
            - qualifies or explains the composition in some way
        * components
            - waybits
            - their order as siblings is irrelevant
    - purpose
        - to define a composition relation among waybits
            - one waybit (whole, composite) containing another (part, component)
            - e.g. "in saying *this* waybit I mean also *these* waybits which are its parts"
        - cf. § waybit § relations § dependency
    - example
          <P>
              <cog:including>
                  <C/>
                  <D/>
                  <E/>
                  <F/>
                  </cog:including>
              <X/>
              <Y/>
              <Z/>
              </P>
        - P has parts C, D, E, F
        - P has underbits X, Y and Z
    - composer cohort
        - a composer cohort is all sibling composers of parent waybit taken together
        - purpose: to divide the parts into anonymous groups
            - one per sibling
        - example
              <P>
                  <X/>
                  <cog:including>
                      <C/>
                      <D/>
                      </cog:including>
                  <Y/>
                  <cog:including>
                      <E/>
                      <F/>
                      </cog:including>
                  <Z/>
                  </P>
            - P has parts C, D and parts E, F
            - P has underbits X, Y and Z
            - the ordering here is abnormal
                - normally the composer (*including*) elements would be written
                  before their waybit siblings X, Y and Z
    - design note
        - not defining a waybit's parts by elemental containment
            - because containment instead defines its underbits
            - in most scripted ways
                - the underbits will be more important than the parts
                - if not more numerous
                - and containment is the most convenient and transparent form of defining them

    ____________________________________________________________________________________________________
    dependency relations`
    - wayscript is basically the declaration of dependency relations among waybits
    - a dependency relation is declared either by nesting one waybit declaration in another
        - or by an equivalent waylink
    - examples of nesting

        * simple
            - one relation

            <waybit>
                <waybit/>
                </waybit>

        * more typical
            - many relations and interrelations

            <waybit>
                <waybit>
                    <waybit/>
                    </waybit>
                <waybit/>
                <waybit/>
                <waybit>
                    <waybit/>
                    <waybit>
                        <waybit/>
                        <waybit/>
                        </waybit>
                    <waybit/>
                    </waybit>
                </waybit>

        + in terms of meaning
            * general

                <dependant>
                    <dependency/>
                    </dependant>

                - unfortunately the word 'dependant' may suggest a thing that hangs below
                    - which is contradictory
                    - because here the dependant is written above

            * specific

                <end>
                    <means/>
                    </end>

                <conclusion>
                    <premise/>
                    </conclusion>

                <successor>
                    <predecessor/>
                    </successor>

                <step_3>
                    <step_2>
                        <step_1/>
                        </step_2>
                    </step_3>

                <supported>
                    <supporter/>
                    </supported>

        + in formal terms
            * over-under
                - conventional for wayscript

                <overbit>
                    <underbit/>
                    </overbit>

            * genealogical
                - conventional for XML

                <parent>
                    <child/>
                    <child/>
                    </parent>

                - each child is a *sibling* of the other
                - unfortunately the words 'parent' and 'child' may suggest a relation of guardian-dependant
                    - which is contradictory
                    - because here the 'parent' waybit is dependant on the 'child' waybits
    - example of waylinkage

        <step_3 cog:lid='s3'>
            <step_2>
                <step_1/>
                </step_2>
            </step_3>

        <step_5a>
            <step_4a>
                <step_3 cog:link='s3'/>
                </step_4a>
            </step_5a>

        <step_5b>
            <step_4b>
                <step_3 cog:link='s3'/>
                </step_4b>
            </step_5b>

        - here step_1
            ( likewise step_2 or 3
            - is an indirect underbit of both step_5a and 5b

    ____________________________________________________________________________________________________
    design constraints`
    [ ⤓ minimal
        - wayscript's necessary form
        * XML-format HTML (XHTML)
            ( http://w3c.github.io/html/introduction.html#html-vs-xhtml
            ( http://w3c.github.io/html/infrastructure.html#xml
            ( http://w3c.github.io/html/xhtml.html
            - HTML
                ∵ wayscript is basic to the waycast
                ∵ the *waycast* is public
                    ( http://reluk.ca/project/way/engineer/wayics/way.xht#way_publication
                ∵ the premiere medium of *publication* today is the web
                ∵ the basic script of the *web* is HTML
                ∴ HTML
            - XML format
                ∵ XML facilitates dealing with the specialized elements and attributes of wayscript
                    - these aspects of XML in particular:
                        - namespacing
                        - strict syntax and parsing
                    - they facilitate:
                        - defining the specialized elements and attributes of wayscript
                        - writing them in source
                        - processing them at runtime

    ____________________________________________________________________________________________________
    HTML inclusions`
    - allowed
    - hyperlinks within a wayscript
        - the *a href* attribute is resolved in waycast space
            ( see cog:cast

    ____________________________________________________________________________________________________
    namespace`
    - XML namespaces for wayscript
    - hierarchy
        * supernamespace
            - examples
                < data:,wayscript.
                < data:,wayscript.bit.
        * subnamespace
            - also '*'
            - examples
                < bit
                < bit.step
                < step
    [ bit
        < data:,wayscript.bit
        - namespace of waybits simply, excluding subspaced waybits such as steps
    * bits
        < data:,wayscript.bit.*
        - namespaces of bit subtypes
            - such as step
            - or others independently defined elsewhere
    [ cog
        < data:,wayscript.cog
        - general-purpose namespace
    [ step
        < data:,wayscript.bit.step
        - namespace of steps
    * wayscript
        < data:,wayscript.*
        - supernamespace of all wayscript

    ____________________________________________________________________________________________________
    practical constraints`
    [ ⤓ minimal
        - what the wayscribe must have
        * a basic knowledge of wayscript
            - begin at § dependency relations among waybits
        * a waycast
            ( http://reluk.ca/project/wayic/cast/
            - wayscript is proper to the waycast
        * a web renderer
            | wayic/read
                ( http://reluk.ca/project/wayic/read/
                - there's no other at present

    ____________________________________________________________________________________________________
    step`
    < namespaced data:,wayscript.bit.step
    - a volitive waybit
        - a distinct|discrete act
        - e.g. a step or stage in a plan
    - enactment order is defined as a dependency relation (§ q.v.)
        - by nesting prior steps within subsequent steps
        ( again not as a sibling relation

    ____________________________________________________________________________________________________
    waybit`
    - a distinct|discrete part of a way
        - formed as an XML element
    - naming
        - naming is free-form
            - except for reserved names
        - purpose of names
            - to help the reader understand the waybits
                - their relations
                - and the larger ways [they compose]
                - to bring out their meaning
            - to serve as placeholders for waybits
                - especially in the more compressed views
                - the names will stand in for the waybits
      / - best not be indispensible to the meaning of the waybit
      /     - because a waylink source (within its context) may effectively change the target name
      // no room here for wayscripting tips, which would need clarifying by example script
        - reserved names
            - names beginning with an underscore ‘_’ are reserved
                - don’t use such names for normal purposes
        - a name of '_' means no name (anonymous waybit)
    - relations
        - composition, see §
        - dependency, see §
        - the sibling relation has no generally defined meaning
    - types
        * waybit simply
            < namespaced data:,wayscript.bit
        * step
            ( see §

    ____________________________________________________________________________________________________
    waylinkage`
    - a waylink is a relation between two waybits (called waylink nodes)
      whereby the content of one (source node) becomes logically identical to the other (target node)
    - visually a waylink might be represented in different ways, including:
        | by a hyperlink from source to target
        | by placing a replica of the target's content in the source
    - the mapping between waylink source nodes and waylinks entire is 1:1
        - each source noded effectively declares a separate waylink
        ( the same is not true of target nodes, which map to waylinks 1:N
    - declaration is unidirectional
        - from source node to target node
      / - except in the case of a dependency loop, q.v.
        - for sake of general simplicity and robustness
            - subordinate building blocks (e.g. underbits) can be implemented
              blind to the uses (overbits) they will be put in future
                - discourages unecessary overbit attachements/assumptions
                  that would tend to increase complexity
                  and decrease robustness of the overall structure
            - one node of the relation (e.g. overbit) can fully define its edges
                - no underbit being able to contradict the definition
                - which simplifies machine (and human) processing of the structure
    * lid attribute
        < cog:lid, namespace data:,wayscript.cog
        - a waylink target node declaration
        - placement: a waybit
            - one that is actually targeted by a waylink source node
                ( an untargeted waybit with a cog:lid attribute is malformed
            - one that has no cog:link attribute
                ( q.v. for reason
        - content: XML ID
            ( differing somewhat from HTML *id* attribute, which is less strictly formed
            ( pending any reason to loosen that restriction
        - equality of *id* and *lid* attributes
            - if the waybit also has an HTML *id* attribute
                - then the two attributes must have equal values
                - else the waybit is malformed
            - purpose of this constraint
                - allow the *lid* attribute to be rendered as an *id* attribute
                    - thereby allowing waylinks to operate as hyperlinks
    * link attribute
        < cog:link, namespace data:,wayscript.cog
        - a waylink source node declaration
        - placement: a waybit
        - two forms of declaration
            | tagless declaration
                < one in which the waybit has content
                - this is a convenience
                - it effectively translates to a second waybit called an 'entagment' of the declaration
                - the entagment:
                    - is a waybit simply
                        - therefore the target node must also be a waybit simply
                            - the same namespace, that is
                            - else the link is malformed
                        - reason is to ease coding
                            - the basic entagment waybit need never be replaced
                              after resolving the target
                        = extend support to all target nodes
                            - taking the namespace from the target
                            - by making use of readable.js ChangeablePartRendering
                    - has a local name of '_ι'
                    - has the same cog:link attribute as the first waybit
                    - is without content
                    - is placed as a direct child of the first waybit
                    - there encodes a normal declaration
                - disallowed for source nodes that are considered by default
                  to be uniquely personal
                    - such as commitment source nodes (those targeting /actor/#commitment)
                    - instead declare them on separate lines of wayscript
                    - why
                        - they are implicitly marked as CUSTOM lines
                        - explictly declaring them on separate lines makes it easier
                          both for wayscribes to keep their special treatment in mind
                            - and for tools to implement it
            | normal declaration
                < one in which the waybit is without content
                - source's effective content is that of target
                - must not have a cog:lid attribute
                    - thereby declaring it also to be a target node
                    - reason: in some applications, it might be infeasible to represent
                        - e.g. where the application gives to source and target nodes
                          distinct representations that would be difficult to combine as one
                - a local name of '_ι' means *inherit from target*
                    - effectively it has the same name as the target node
                - must have the same namespace as the target node
                    ( or it's an error
                    < e.g. only a step can target a step
        - target resolution
            - the URL is resolved in waycast space
                ( see cog:cast
            - the URL must be relative to the waycast and the target document
              must be in the same waycast
                - reason: self containment for sake of:
                    - portability
                    - propagation
                        ( http://reluk.ca/project/way/engineer/wayics/cast/way.xht#ever_F
            - if the terminal path component is a directory
                - so indicated by a terminating slash '/'
                - then 'way.xht' is assumed as the file name
            - the URL must include a fragment to identify the target node
                < see attribute cog:lid
      / - dependency loop
      /     - may occur when the target node is an ancestor waybit
      /     - formally allowed though it might not actually make sense
      // till I encounter the need, and can give it as an example



                                          Copyright © 2017 Michael Allan and contributors.  Licence MIT.
