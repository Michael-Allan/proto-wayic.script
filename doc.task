wayic.script/doc.task - Documentation in rough

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Attributive grouping`
    - a waybit element nested in an attributive group element nested in a waybit element
    - formalizing inherence or subsistence of one way part in another
        < a form of inner way relation, § q.v.
    - example [ETO]

          <A>
              <cog:group rel='in'>
                  <P>

        - meaning: part P inheres in part A, or subsists in part A
    [ *group* element
        < cog:group, namespace data:,wayscript.cog
        - placement: child of waybit element
        - content
            + qualifying text
                < optional
                - to qualify or explain the composition in some way
                - placement: leading child
                - typically a short phrase terminated by a colon
                - example

                      <A>
                          <cog:group rel='in'> including:
                              <P>
                              <Q>
                      <B>
                          <cog:group rel='in'> comprising:
                              <P>
                              <Q>

                    - meaning
                        - part A has parts P and Q
                        - part B has parts P and Q only
                        - and, by the way:
                            - parts A and B co-occur, and in each
                              parts P and Q co-occur
                                ( § Level conjunction of waybit elements
            + one or more waybits
                - to represent the parts that inhere or subsist
        + *rel* attribute
            < mandatory, no namespace
            - to define the way relation between the waybit parent of the *group* element
              and each waybit child of the *group* element
            ( modeled after the HTML *rel* attribute
                ( https://html.spec.whatwg.org/multipage/semantics.html#attr-link-rel
            - value: 'in'
                - the 'in' value specifies a relation of inherence or subsistence
                    - it declares that the way parts represented by the children of the group element
                      inhere or subsist in the part represented by its parent
                ( later the value format may be expanded to a set of space-separated tokens
                    ( https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#set-of-space-separated-tokens

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Commitment declaration`
    - a bitform waylink source node that targets /#commitment
        - whereby the waycaster declares a commitment to act
    - the waycaster
        - should
            * place one in precisely each waybit of the larger way declaration
              where he intends to act directly
                - as an underbit of that waybit
            * set the node name to reflect the commited action
        - may
            * set a cog:ordinal attribute to assign an intended order to the act
                ( tasked as wayic.read § cog:ordinal
                - so prioritizing it relative to other declared commitments
    - implicitly the whole line of wayscript that declares the commitment is uniquely personal
        ( wayic.copy § uniquely personal lines of text § implicit
        - a convienience
        - whence the bitform constraint on commitment declarations
            - a hyperform node might (and most often would) occupy but a part of the line
                - making this convienience harder to implement
    [ intracast
        ( intracast commitment declaration
        - currently documented in source text of http://reluk.ca/project/waycast/way.xht#commitment
            = copy that documentation to here
    [ intercast
        ( intercast commitment declaration
        - see wayic.intercast § commitment declaration § intercast

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Design constraints`
    [ ⤓ minimal
        - necessary form of wayscript
        * XML-format HTML (XHTML)
            ( http://w3c.github.io/html/introduction.html#html-vs-xhtml
            ( http://w3c.github.io/html/infrastructure.html#xml
            ( http://w3c.github.io/html/xhtml.html
            - HTML
                ∵ wayscript is basic to the waycast
                ∵ the *waycast* is public
                    ( http://reluk.ca/project/waycast/engineer/wayics/cast/way.xht#availability
                ∵ the premiere medium of *publication* today is the web
                ∵ the basic script of the *web* is HTML
                ∴ HTML
            - XML format
                ∵ XML facilitates coping with the specialized elements and attributes of wayscript
                    - these aspects of XML in particular:
                        - namespacing
                        - strict syntax and parsing
                    - they facilitate:
                        - defining the specialized elements and attributes of wayscript
                        - writing them in source
                        - processing them at runtime
        * location in a way declaration document

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    HTML inclusions`
    - allowed
    - hyperlinks within wayscript
        - the *href* attribute of the *a* element is resolved in waycast space
            ( q,v. in § cast element

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Inner way relations`
    < relations among the parts of a way
    [ form
        - see § types of relation §§ form, below
        - combined example [ETO]

              <C>
                  <cog:group rel='in'>
                      <P>
                      <Q>
                  <B>
                      <A>

            - meaning
                - parts P and Q inhere in part C, or subsist in part C
                - parts P and Q co-occur in part C
                - part C depends on part B, or is caused by part B
                - part B depends on part A, or is caused by part A
    [ types of relation
        - here categorized in Kantian terms
            ( Kant, Table of Categories, A80/B106
            ( cf. A336/B393 where he applies these categories (below) to conditional relations
        + inherence and subsistence
            ( I take it subsistence here means *existence in*
            ' *substantia et accidens*
                ( meaning essence and accidents
                ( cf. Fred Brooks, 1987, No silver bullet: essence and accidents of software engineering
            - form
                | a waybit element nested in an attributive group element nested in a waybit element
                    ( § Attributive grouping
                    - example [ETO]

                          <B>
                              <cog:group rel='in'>
                                  <A>

                        - meaning: part A inheres in part B, or subsists in part B
        + causality and dependence
            - relations of "cause and effect"
            - form
                | one waybit element nested in another
                    ( § Nesting of waybit elements
                    - example [ETO]

                          <B>
                              <A>

                        - meaning: part A causes part B, or part B depends on part A
        + co-occurence
            - rather than Kant's 'community', summarized as "reciprocity between agent and patient"
            - form
                | one waybit element in level conjunction with another
                    ( § Level conjunction of waybit elements
                    - example [ETO]

                          <A>
                          <B>

                        - meaning: parts A and B co-occur

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Level conjunction of waybit elements`
    - formalizing a relation of co-occurence between way parts
    - one waybit element in level conjunction with another
        < a form of inner way relation, § q.v.
    - examples [ETO]
        + general

              <A>
              <B>

            - meaning: parts A and B co-occur
            + formal
                ( as per § Nesting of waybit elements, q.v.
                + genealogical terms

                      <A> Sibling
                      <B> Sibling

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Location`
    - wayscript is located in way declaration documents

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Namespacing`
    - XML namespacing for wayscript
    - terms of hierarchy
        * supernamespace
            - examples
                < data:,wayscript.
                < data:,wayscript.bit.
        * subnamespace
            - also '*'
            - examples
                < bit
                < bit.step
                < step
    - namespaces
        < data:,wayscript.
            - wayscript supernamespace
            + data:,wayscript.bit
                - namespace of waybits simply, excluding subspaced waybits such as steps
                < data:,wayscript.bit.
                    - supernamespace of waybit subtypes
                        - such as step
                        - or others independently defined elsewhere
                    + data:,wayscript.bit.step
                        - namespace of steps
            + data:,wayscript.cog
                - general purpose namespace

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Nesting of waybit elements`
    - one waybit element nested in another
    - formalizing a relation of causality or dependence between way parts
        < a form of inner way relation, § q.v.
    - examples [ETO]
        + general
            - causality or dependence

              <B>
                  <A>

            - meaning: part A causes part B, or part B depends on part A
            + formal
                - referring to the empty form, implying no meaning
                + genealogical terms
                    - the convention for both HTML and XML, thus also for wayscript

                      <B> Parent
                          <A> Child

                      <B> Ancestor
                            ⋱
                            <A> Descendant

                + arboreal terms

                      <C> Root
                            ⋱
                            <B> Branch
                                  ⋱
                                  <A> Leaf

                      <B> Stem
                          <A>

                + spatial terms

                      <B> Overbit
                            ⋱
                            <A> Underbit
        + causality

              <B> Effect
                  <A> Cause

            - meaning
                - cause A conditions effect B
                - cause A is the reason for effect B
        + dependence
            - dependence is expected to predominate over causality in a typical waycast

              <B> Dependant
                  <A>

            - meaning: dependant B depends on part A
                ( one might attach the name 'Dependency' to A, but that would be non-standard English
            - taking 'dependence' in its original sense of down hanging
                - note that the nested form turns it upside down
                - visually B depends (hangs down) from A
            + logical dependence
                - viz. in the logical parts of a way

                  <B> Conclusion
                      <A> Premise

                - meaning: from premise A one infers conclusion B
            + practical dependence
                - viz. in the practical parts of a way
                + means-end relation

                      <B> End
                          <A> Means

                    - meaning
                        - by means A one attains end B
                        - to be sure, also implied is a reverse dependence:
                            - end B warrants means A
                            - in other words
                                - end B conditions means A
                                - end B is the reason for means A
                                - the rationality of employing means A
                                  depends on the will to attain end B
                + order condition
                    ( from § Step

                      <step:s3> Step 3
                          <step:s2> Step 2
                              <step:s1> Step 1

                    - meaning
                        - step 3 must succeed step 2
                        - step 2 must succeed step 1

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Step`
    < namespaced data:,wayscript.bit.step
    - formalizing a volitive part of a way
        - a distinct|discrete act
        - e.g. a step or stage in a plan
    - nesting of step elements formalizes an order condition among the steps
        ( see also § Nesting of waybit elements
        - example [ETO]

              <step:s3> Step 3
                  <step:s2> Step 2
                      <step:s1> Step 1

            - meaning
                - step 3 must succeed step 2
                - step 2 must succeed step 1
                - relative to each other, the steps must execute in the declared order
        - counter example

              <step:s1> Step 1
              <step:s2> Step 2
              <step:s3> Step 3

            - meaning: steps 1, 2 and 3 are independent of each other
                - relative to each other, they may execute in any order

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waybit`
    ( waybit#waybit
    + names
        < the naming of waybits
        - naming is free-form
            - except for reserved names
        - purpose of names
            - to help the reader understand the waybits
                - their relations
                - and the larger ways [they compose]
                - to bring out their meaning
            - to serve as placeholders for waybits
                - especially in the more compressed views
                - the names will stand in for the waybits
      / - best not be indispensible to the meaning of the waybit
      /     - ∵ a bitform waylink source (within its context) may effectively change the target name
      // no room here for wayscripting tips, which would need clarifying by example script
        - reserved names
            - names beginning with an underscore ‘_’ are reserved
                - do not use such names for normal purposes
        - a name of '_' means no name (anonymous waybit)
    + types
        < types of waybit
        * waybit simply
            < namespaced data:,wayscript.bit
        * step
            ( see §

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waycast space`
    - a waycast space is a URI resolution context whose base URI identifies a waycast base directory
        ( https://tools.ietf.org/html/rfc3986#section-5
    - its main purpose is to resolve the URI references of waylinks and hyperlinks
    - for each URI reference in waycast space
        - if it has *path-absolute* form
            ( https://tools.ietf.org/html/rfc3986#section-3.3
        - then its leading '/' stands for the base directory of the waycast

    ────────────────────────────────────────────────────────────────────────────────────────────────────
    Waylink`
    - a waylink is a formed of two elements: a source node and a target node
    - purpose: to form[alize]|declare a way relation involving a remotely declared waybit
    - the mapping between source nodes and waylinks entire is 1:1
        - each source node effectively declares a separate waylink
        ( the same is not true of target nodes, which map to waylinks 1:N
    - linkage is declared unidirectionally
        - from source node to target node
      / - except in the case of looped waylinkage, q.v.
        - for sake of general simplicity and robustness
            - subordinate building blocks (e.g. underbits) can be implemented
              blind to the uses (overbits) they will be put in future
                - discourages unecessary overbit attachements/assumptions
                  that would tend to increase complexity
                  and decrease robustness of the overall structure
            - one node (e.g. overbit) can fully define its edges
                - no underbit being able to contradict the definition
                - which simplifies machine (and human) processing of the structure
    [ target node: the *id* attribute
        < no namespace
        - content: XML ID, unique within document
            - stricter than the formal requirement of HTML
            - to be on the safe side, pending any urgent cause for a looser form
        - the conditions of a waylink target node, which define it as such:
            - it is a waybit
            - it has an *id* attribute in proper form
            - it is targeted by a waylink source node
    [ source node: the *link* attribute
        < cog:link, namespace data:,wayscript.cog
        - a waylink source node declaration
        - content is a fragment preceded by a URI reference that is either:
            | a full URI
                ( https://tools.ietf.org/html/rfc3986#section-1.1.1
                ( https://tools.ietf.org/html/rfc3986#section-3
                ( https://tools.ietf.org/html/rfc3986#section-3.1
                - viz. having a scheme
            | a *path-absolute*
                ( https://tools.ietf.org/html/rfc3986#section-3.3
                - it will be resolved in waycast space
                    ( see § target resolution
                - no allowance for relative paths
                    - e.g. beginning with a '.', '..' or file name
                    - reason
                        - to ease the tracing of a way that extends across multiple documents
                        - relative paths are harder to follow
                            ( see e.g. normalizeURL in http://reluk.ca/project/wayic/read/readable.js
            | a *same-document reference*
                ( https://tools.ietf.org/html/rfc3986#section-4.4
                - thus targeting a node in the same document
        - target resolution
            - the URI reference is resolved in waycast space
                ( q,v. in § cast element
            - this (together with the restriction against relative paths)
              ensures that any reference needing resolution (not a full URI)
              resolves to a target in the same waycast
                - why this constraint is wanted: self containment for the sake of portability
                    - especially for the purpose of propagation
                        ( http://reluk.ca/project/waycast/engineer/wayics/cast/way.xht#ever_F
            - if the terminal path component is a directory
                - so indicated by a terminating slash '/'
                - then 'way.xht' is assumed as the file name
            - the URL must include a fragment to identify the target node
      / - looped waylinkage
      /     - may occur when the target node is an ancestor waybit
      /     - formally allowed though it is not always guaranteed to make sense
      // till I encounter the need in practice, and can give that as an example
        - two forms of waylink source node are defined:
            + bitform
                - placement: as a waybit
                - form
                    - no content
                        - the source's effective content will be that of target
                    - no *id* attribute
                        - disallowed
                        - whereby it would also serve as a target node
                        - reason: it might be infeasible to represent in some applications
                            - e.g. where the application gives to source and target nodes
                              distinct representations that would be difficult to combine as one
                    - a local name of '_same' means *same as the target name*
                        - effectively it has the same name as the target node
                    - must have the same namespace as the target node
                        ( or it is an error
                        < e.g. only a step can target a step
            + hyperform
                - placement: as an HTML *a* element that descends from a waybit
                - form
                    - no *href* attribute
                        - disallowed
                        - the reference is given by the *link* attribute instead
    [ meaning
        - the meaning of a waylink is determined by would-be wayscript changes (determinating changes)
          as that [meaning] introduced by the changes
        - determinating changes of a waylink:
            * any waylink
                - the target node (as a waybit) is located *also* as a child
                  of the source node's nearest waybit ancestor
                    - adding this location to its original location, or locations
                    - though only as a waybit at this new location, not also as a target node
            * bitform waylink
                - the target node takes *also* the name of the source node
                    - adding this name to its original name, or names
                    - if indeed it is new
                - the source node is removed
    [ causality and dependence relations
        - a formal limitation owing to the manner in which the meaning of a waylink is determined
            ( § Waylink § meaning
        - no waylink can bring its target node into a relation of causality in the role of effect
            - nor of dependence in the role of dependant
        - adding a nested waybit to a hyperform source node (the only form that allows such addition)
            - thus bringing it into a relation of causality or dependence
            - would not bring the target node into the same relation
        - the target gains a determinating location *aside* from the source
            ( § Waylink § meaning § determinating changes of a waylink
            - whereby it gains no content from the source

    ════════════════════════════════════════════════════════════════════════════════════════════════════
    Note`

    [ETO]  End tags omitted.  Here the XML end tags are omitted for sake of clarity.


                                     Copyright © 2017-2018 Michael Allan and contributors.  Licence MIT.
